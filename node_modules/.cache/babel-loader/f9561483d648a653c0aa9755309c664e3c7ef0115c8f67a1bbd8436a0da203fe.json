{"ast":null,"code":"export async function mergeSort(array, key, speed, updateFn, start = 0, end = array.length - 1, metrics = {\n  comparisons: 0,\n  swaps: 0\n}) {\n  if (start >= end) return array;\n  const mid = Math.floor((start + end) / 2);\n  await mergeSort(array, key, speed, updateFn, start, mid, metrics);\n  await mergeSort(array, key, speed, updateFn, mid + 1, end, metrics);\n  await merge(array, key, speed, updateFn, start, mid, end, metrics);\n\n  // On the top-level call, send the final metrics\n  if (start === 0 && end === array.length - 1) {\n    await updateFn(array, [], false, speed, {\n      totalComparisons: metrics.comparisons,\n      totalSwaps: metrics.swaps\n    });\n  }\n  return array;\n}\nasync function merge(array, key, speed, updateFn, start, mid, end, metrics) {\n  let temp = [];\n  let i = start;\n  let j = mid + 1;\n  while (i <= mid && j <= end) {\n    // Highlight the elements being compared and count comparison\n    metrics.comparisons++;\n    await updateFn(array, [i, j], false, speed);\n    if (array[i][key] <= array[j][key]) {\n      temp.push(array[i++]);\n    } else {\n      temp.push(array[j++]);\n      metrics.swaps++; // Count as a swap when we take from right array\n    }\n  }\n  while (i <= mid) {\n    temp.push(array[i++]);\n  }\n  while (j <= end) {\n    temp.push(array[j++]);\n  }\n\n  // Copy back to original array and count each placement as a swap\n  for (let k = start; k <= end; k++) {\n    metrics.swaps++;\n    array[k] = temp[k - start];\n    // Show the merge in action\n    await updateFn(array, [k], true, speed);\n  }\n}","map":{"version":3,"names":["mergeSort","array","key","speed","updateFn","start","end","length","metrics","comparisons","swaps","mid","Math","floor","merge","totalComparisons","totalSwaps","temp","i","j","push","k"],"sources":["/Users/shreya/Desktop/DAA(sem-4)/lab-EL/StockSorting_Visualizer/src/algorithms/mergeSort.js"],"sourcesContent":["export async function mergeSort(array, key, speed, updateFn, start = 0, end = array.length - 1, metrics = { comparisons: 0, swaps: 0 }) {\n    if (start >= end) return array;\n\n    const mid = Math.floor((start + end) / 2);\n    \n    await mergeSort(array, key, speed, updateFn, start, mid, metrics);\n    await mergeSort(array, key, speed, updateFn, mid + 1, end, metrics);\n    await merge(array, key, speed, updateFn, start, mid, end, metrics);\n    \n    // On the top-level call, send the final metrics\n    if (start === 0 && end === array.length - 1) {\n        await updateFn(\n            array,\n            [],\n            false,\n            speed,\n            { totalComparisons: metrics.comparisons, totalSwaps: metrics.swaps }\n        );\n    }\n    \n    return array;\n}\n\nasync function merge(array, key, speed, updateFn, start, mid, end, metrics) {\n    let temp = [];\n    let i = start;\n    let j = mid + 1;\n\n    while (i <= mid && j <= end) {\n        // Highlight the elements being compared and count comparison\n        metrics.comparisons++;\n        await updateFn(array, [i, j], false, speed);\n\n        if (array[i][key] <= array[j][key]) {\n            temp.push(array[i++]);\n        } else {\n            temp.push(array[j++]);\n            metrics.swaps++; // Count as a swap when we take from right array\n        }\n    }\n\n    while (i <= mid) {\n        temp.push(array[i++]);\n    }\n\n    while (j <= end) {\n        temp.push(array[j++]);\n    }\n\n    // Copy back to original array and count each placement as a swap\n    for (let k = start; k <= end; k++) {\n        metrics.swaps++;\n        array[k] = temp[k - start];\n        // Show the merge in action\n        await updateFn(array, [k], true, speed);\n    }\n}"],"mappings":"AAAA,OAAO,eAAeA,SAASA,CAACC,KAAK,EAAEC,GAAG,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,KAAK,GAAG,CAAC,EAAEC,GAAG,GAAGL,KAAK,CAACM,MAAM,GAAG,CAAC,EAAEC,OAAO,GAAG;EAAEC,WAAW,EAAE,CAAC;EAAEC,KAAK,EAAE;AAAE,CAAC,EAAE;EACpI,IAAIL,KAAK,IAAIC,GAAG,EAAE,OAAOL,KAAK;EAE9B,MAAMU,GAAG,GAAGC,IAAI,CAACC,KAAK,CAAC,CAACR,KAAK,GAAGC,GAAG,IAAI,CAAC,CAAC;EAEzC,MAAMN,SAAS,CAACC,KAAK,EAAEC,GAAG,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,KAAK,EAAEM,GAAG,EAAEH,OAAO,CAAC;EACjE,MAAMR,SAAS,CAACC,KAAK,EAAEC,GAAG,EAAEC,KAAK,EAAEC,QAAQ,EAAEO,GAAG,GAAG,CAAC,EAAEL,GAAG,EAAEE,OAAO,CAAC;EACnE,MAAMM,KAAK,CAACb,KAAK,EAAEC,GAAG,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,KAAK,EAAEM,GAAG,EAAEL,GAAG,EAAEE,OAAO,CAAC;;EAElE;EACA,IAAIH,KAAK,KAAK,CAAC,IAAIC,GAAG,KAAKL,KAAK,CAACM,MAAM,GAAG,CAAC,EAAE;IACzC,MAAMH,QAAQ,CACVH,KAAK,EACL,EAAE,EACF,KAAK,EACLE,KAAK,EACL;MAAEY,gBAAgB,EAAEP,OAAO,CAACC,WAAW;MAAEO,UAAU,EAAER,OAAO,CAACE;IAAM,CACvE,CAAC;EACL;EAEA,OAAOT,KAAK;AAChB;AAEA,eAAea,KAAKA,CAACb,KAAK,EAAEC,GAAG,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,KAAK,EAAEM,GAAG,EAAEL,GAAG,EAAEE,OAAO,EAAE;EACxE,IAAIS,IAAI,GAAG,EAAE;EACb,IAAIC,CAAC,GAAGb,KAAK;EACb,IAAIc,CAAC,GAAGR,GAAG,GAAG,CAAC;EAEf,OAAOO,CAAC,IAAIP,GAAG,IAAIQ,CAAC,IAAIb,GAAG,EAAE;IACzB;IACAE,OAAO,CAACC,WAAW,EAAE;IACrB,MAAML,QAAQ,CAACH,KAAK,EAAE,CAACiB,CAAC,EAAEC,CAAC,CAAC,EAAE,KAAK,EAAEhB,KAAK,CAAC;IAE3C,IAAIF,KAAK,CAACiB,CAAC,CAAC,CAAChB,GAAG,CAAC,IAAID,KAAK,CAACkB,CAAC,CAAC,CAACjB,GAAG,CAAC,EAAE;MAChCe,IAAI,CAACG,IAAI,CAACnB,KAAK,CAACiB,CAAC,EAAE,CAAC,CAAC;IACzB,CAAC,MAAM;MACHD,IAAI,CAACG,IAAI,CAACnB,KAAK,CAACkB,CAAC,EAAE,CAAC,CAAC;MACrBX,OAAO,CAACE,KAAK,EAAE,CAAC,CAAC;IACrB;EACJ;EAEA,OAAOQ,CAAC,IAAIP,GAAG,EAAE;IACbM,IAAI,CAACG,IAAI,CAACnB,KAAK,CAACiB,CAAC,EAAE,CAAC,CAAC;EACzB;EAEA,OAAOC,CAAC,IAAIb,GAAG,EAAE;IACbW,IAAI,CAACG,IAAI,CAACnB,KAAK,CAACkB,CAAC,EAAE,CAAC,CAAC;EACzB;;EAEA;EACA,KAAK,IAAIE,CAAC,GAAGhB,KAAK,EAAEgB,CAAC,IAAIf,GAAG,EAAEe,CAAC,EAAE,EAAE;IAC/Bb,OAAO,CAACE,KAAK,EAAE;IACfT,KAAK,CAACoB,CAAC,CAAC,GAAGJ,IAAI,CAACI,CAAC,GAAGhB,KAAK,CAAC;IAC1B;IACA,MAAMD,QAAQ,CAACH,KAAK,EAAE,CAACoB,CAAC,CAAC,EAAE,IAAI,EAAElB,KAAK,CAAC;EAC3C;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}