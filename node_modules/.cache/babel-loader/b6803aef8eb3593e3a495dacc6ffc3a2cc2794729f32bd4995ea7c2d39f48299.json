{"ast":null,"code":"var _jsxFileName = \"C:\\\\stock-sorting-visualizer\\\\src\\\\components\\\\Visualizations\\\\BarChart.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BarChart = ({\n  data,\n  sortKey,\n  onStockClick\n}) => {\n  // Get the display value based on sortKey\n  const getDisplayValue = stock => {\n    switch (sortKey) {\n      case 'price':\n        return `$${stock.price.toFixed(2)}`;\n      case 'volume':\n        return `${(stock.volume / 1000000).toFixed(1)}M`;\n      case 'change':\n        return `${stock.change >= 0 ? '+' : ''}${stock.change.toFixed(2)}`;\n      case 'changePercent':\n        return stock.changePercent;\n      default:\n        return `$${stock.price.toFixed(2)}`;\n    }\n  };\n  const maxValue = Math.max(...data.map(item => item[sortKey]));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bar-chart\",\n    children: data.map(stock => {\n      const percentage = stock[sortKey] / maxValue * 100;\n      const isPositive = stock.change >= 0;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stock-bar\",\n        onClick: () => onStockClick && onStockClick(stock),\n        style: {\n          width: `${percentage}%`,\n          backgroundColor: isPositive ? '#4CAF50' : '#F44336'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"stock-label\",\n          children: [stock.symbol, \": \", getDisplayValue(stock)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 13\n        }, this)\n      }, stock.symbol, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n_c = BarChart;\nexport default BarChart;\nvar _c;\n$RefreshReg$(_c, \"BarChart\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","BarChart","data","sortKey","onStockClick","getDisplayValue","stock","price","toFixed","volume","change","changePercent","maxValue","Math","max","map","item","className","children","percentage","isPositive","onClick","style","width","backgroundColor","symbol","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/stock-sorting-visualizer/src/components/Visualizations/BarChart.js"],"sourcesContent":["import React from 'react';\r\n\r\nconst BarChart = ({ data, sortKey, onStockClick }) => {\r\n  // Get the display value based on sortKey\r\n  const getDisplayValue = (stock) => {\r\n    switch(sortKey) {\r\n      case 'price':\r\n        return `$${stock.price.toFixed(2)}`;\r\n      case 'volume':\r\n        return `${(stock.volume / 1000000).toFixed(1)}M`;\r\n      case 'change':\r\n        return `${stock.change >= 0 ? '+' : ''}${stock.change.toFixed(2)}`;\r\n      case 'changePercent':\r\n        return stock.changePercent;\r\n      default:\r\n        return `$${stock.price.toFixed(2)}`;\r\n    }\r\n  };\r\n\r\n  const maxValue = Math.max(...data.map(item => item[sortKey]));\r\n  \r\n  return (\r\n    <div className=\"bar-chart\">\r\n      {data.map((stock) => {\r\n        const percentage = (stock[sortKey] / maxValue) * 100;\r\n        const isPositive = stock.change >= 0;\r\n        \r\n        return (\r\n          <div \r\n            key={stock.symbol}\r\n            className=\"stock-bar\"\r\n            onClick={() => onStockClick && onStockClick(stock)}\r\n            style={{\r\n              width: `${percentage}%`,\r\n              backgroundColor: isPositive ? '#4CAF50' : '#F44336'\r\n            }}\r\n          >\r\n            <span className=\"stock-label\">\r\n              {stock.symbol}: {getDisplayValue(stock)}\r\n            </span>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BarChart;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,QAAQ,GAAGA,CAAC;EAAEC,IAAI;EAAEC,OAAO;EAAEC;AAAa,CAAC,KAAK;EACpD;EACA,MAAMC,eAAe,GAAIC,KAAK,IAAK;IACjC,QAAOH,OAAO;MACZ,KAAK,OAAO;QACV,OAAO,IAAIG,KAAK,CAACC,KAAK,CAACC,OAAO,CAAC,CAAC,CAAC,EAAE;MACrC,KAAK,QAAQ;QACX,OAAO,GAAG,CAACF,KAAK,CAACG,MAAM,GAAG,OAAO,EAAED,OAAO,CAAC,CAAC,CAAC,GAAG;MAClD,KAAK,QAAQ;QACX,OAAO,GAAGF,KAAK,CAACI,MAAM,IAAI,CAAC,GAAG,GAAG,GAAG,EAAE,GAAGJ,KAAK,CAACI,MAAM,CAACF,OAAO,CAAC,CAAC,CAAC,EAAE;MACpE,KAAK,eAAe;QAClB,OAAOF,KAAK,CAACK,aAAa;MAC5B;QACE,OAAO,IAAIL,KAAK,CAACC,KAAK,CAACC,OAAO,CAAC,CAAC,CAAC,EAAE;IACvC;EACF,CAAC;EAED,MAAMI,QAAQ,GAAGC,IAAI,CAACC,GAAG,CAAC,GAAGZ,IAAI,CAACa,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACb,OAAO,CAAC,CAAC,CAAC;EAE7D,oBACEH,OAAA;IAAKiB,SAAS,EAAC,WAAW;IAAAC,QAAA,EACvBhB,IAAI,CAACa,GAAG,CAAET,KAAK,IAAK;MACnB,MAAMa,UAAU,GAAIb,KAAK,CAACH,OAAO,CAAC,GAAGS,QAAQ,GAAI,GAAG;MACpD,MAAMQ,UAAU,GAAGd,KAAK,CAACI,MAAM,IAAI,CAAC;MAEpC,oBACEV,OAAA;QAEEiB,SAAS,EAAC,WAAW;QACrBI,OAAO,EAAEA,CAAA,KAAMjB,YAAY,IAAIA,YAAY,CAACE,KAAK,CAAE;QACnDgB,KAAK,EAAE;UACLC,KAAK,EAAE,GAAGJ,UAAU,GAAG;UACvBK,eAAe,EAAEJ,UAAU,GAAG,SAAS,GAAG;QAC5C,CAAE;QAAAF,QAAA,eAEFlB,OAAA;UAAMiB,SAAS,EAAC,aAAa;UAAAC,QAAA,GAC1BZ,KAAK,CAACmB,MAAM,EAAC,IAAE,EAACpB,eAAe,CAACC,KAAK,CAAC;QAAA;UAAAoB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACnC;MAAC,GAVFvB,KAAK,CAACmB,MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAWd,CAAC;IAEV,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACC,EAAA,GA3CI7B,QAAQ;AA6Cd,eAAeA,QAAQ;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}