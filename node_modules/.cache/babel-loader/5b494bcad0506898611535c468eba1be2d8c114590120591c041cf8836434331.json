{"ast":null,"code":"const quickSort = async (array, key, speed, updateFn) => {\n  let totalComparisons = 0;\n  let totalSwaps = 0;\n  const partition = async (low, high) => {\n    // Pseudo code step 8: Start partition\n    await updateFn(array, [high], false, speed, null, 8);\n    const pivot = array[high][key];\n    let i = low - 1;\n\n    // Pseudo code step 10: Start partition loop\n    await updateFn(array, [high], false, speed, null, 10);\n    for (let j = low; j < high; j++) {\n      totalComparisons++;\n      // Pseudo code step 11: Compare with pivot\n      await updateFn(array, [j, high], false, speed, null, 11);\n      if (array[j][key] <= pivot) {\n        i++;\n        // Pseudo code step 12-13: Increment i and swap\n        await updateFn(array, [i, j], true, speed, null, 12);\n        const temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n        totalSwaps++;\n      }\n    }\n\n    // Pseudo code step 15: Final partition swap\n    await updateFn(array, [i + 1, high], true, speed, null, 15);\n    const temp = array[i + 1];\n    array[i + 1] = array[high];\n    array[high] = temp;\n    totalSwaps++;\n    return i + 1;\n  };\n  const quickSortHelper = async (low, high) => {\n    if (low < high) {\n      // Pseudo code step 1-2: Check if partition needed\n      await updateFn(array, [low, high], false, speed, null, 1);\n\n      // Pseudo code step 3: Get partition index\n      await updateFn(array, [low, high], false, speed, null, 3);\n      const pi = await partition(low, high);\n\n      // Pseudo code step 4: Sort left partition\n      await updateFn(array, [low, pi - 1], false, speed, null, 4);\n      await quickSortHelper(low, pi - 1);\n\n      // Pseudo code step 5: Sort right partition\n      await updateFn(array, [pi + 1, high], false, speed, null, 5);\n      await quickSortHelper(pi + 1, high);\n    }\n  };\n  await quickSortHelper(0, array.length - 1);\n\n  // Final update with metrics\n  await updateFn(array, [], false, speed, {\n    totalComparisons,\n    totalSwaps\n  }, 16);\n  return array;\n};\nexport default quickSort;","map":{"version":3,"names":["quickSort","array","key","speed","updateFn","totalComparisons","totalSwaps","partition","low","high","pivot","i","j","temp","quickSortHelper","pi","length"],"sources":["/Users/shreya/Desktop/DAA(sem-4)/lab-EL/StockSorting_Visualizer/src/algorithms/quickSort.js"],"sourcesContent":["const quickSort = async (array, key, speed, updateFn) => {\n    let totalComparisons = 0;\n    let totalSwaps = 0;\n\n    const partition = async (low, high) => {\n        // Pseudo code step 8: Start partition\n        await updateFn(array, [high], false, speed, null, 8);\n        \n        const pivot = array[high][key];\n        let i = low - 1;\n\n        // Pseudo code step 10: Start partition loop\n        await updateFn(array, [high], false, speed, null, 10);\n\n        for (let j = low; j < high; j++) {\n            totalComparisons++;\n            // Pseudo code step 11: Compare with pivot\n            await updateFn(array, [j, high], false, speed, null, 11);\n\n            if (array[j][key] <= pivot) {\n                i++;\n                // Pseudo code step 12-13: Increment i and swap\n                await updateFn(array, [i, j], true, speed, null, 12);\n                \n                const temp = array[i];\n                array[i] = array[j];\n                array[j] = temp;\n                totalSwaps++;\n            }\n        }\n\n        // Pseudo code step 15: Final partition swap\n        await updateFn(array, [i + 1, high], true, speed, null, 15);\n        \n        const temp = array[i + 1];\n        array[i + 1] = array[high];\n        array[high] = temp;\n        totalSwaps++;\n\n        return i + 1;\n    };\n\n    const quickSortHelper = async (low, high) => {\n        if (low < high) {\n            // Pseudo code step 1-2: Check if partition needed\n            await updateFn(array, [low, high], false, speed, null, 1);\n\n            // Pseudo code step 3: Get partition index\n            await updateFn(array, [low, high], false, speed, null, 3);\n            const pi = await partition(low, high);\n\n            // Pseudo code step 4: Sort left partition\n            await updateFn(array, [low, pi - 1], false, speed, null, 4);\n            await quickSortHelper(low, pi - 1);\n\n            // Pseudo code step 5: Sort right partition\n            await updateFn(array, [pi + 1, high], false, speed, null, 5);\n            await quickSortHelper(pi + 1, high);\n        }\n    };\n\n    await quickSortHelper(0, array.length - 1);\n\n    // Final update with metrics\n    await updateFn(array, [], false, speed, {\n        totalComparisons,\n        totalSwaps\n    }, 16);\n\n    return array;\n};\n\nexport default quickSort;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}