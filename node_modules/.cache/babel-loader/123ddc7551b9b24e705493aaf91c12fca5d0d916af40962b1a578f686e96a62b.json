{"ast":null,"code":"// Mock data fallback\nimport { mockStocks } from './mockData';\nconst API_KEY = 'YOUR_ALPHA_VANTAGE_KEY';\nconst BASE_URL = 'https://www.alphavantage.co/query';\nexport const fetchStockData = async () => {\n  try {\n    const symbols = ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'META'];\n    const requests = symbols.map(symbol => fetch(`${BASE_URL}?function=GLOBAL_QUOTE&symbol=${symbol}&apikey=${API_KEY}`));\n    const responses = await Promise.all(requests);\n    const data = await Promise.all(responses.map(res => res.json()));\n    return data.map(item => ({\n      symbol: item['Global Quote']['01. symbol'],\n      price: parseFloat(item['Global Quote']['05. price']),\n      change: parseFloat(item['Global Quote']['09. change']),\n      changePercent: item['Global Quote']['10. change percent'],\n      volume: parseInt(item['Global Quote']['06. volume'])\n    }));\n  } catch (error) {\n    console.error(\"API Error, using mock data:\", error);\n    return mockStocks;\n  }\n};","map":{"version":3,"names":["mockStocks","API_KEY","BASE_URL","fetchStockData","symbols","requests","map","symbol","fetch","responses","Promise","all","data","res","json","item","price","parseFloat","change","changePercent","volume","parseInt","error","console"],"sources":["C:/stock-sorting-visualizer/src/api/stockApi.js"],"sourcesContent":["// Mock data fallback\r\nimport { mockStocks } from './mockData';\r\n\r\nconst API_KEY = 'YOUR_ALPHA_VANTAGE_KEY';\r\nconst BASE_URL = 'https://www.alphavantage.co/query';\r\n\r\nexport const fetchStockData = async () => {\r\n  try {\r\n    const symbols = ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'META'];\r\n    const requests = symbols.map(symbol => \r\n      fetch(`${BASE_URL}?function=GLOBAL_QUOTE&symbol=${symbol}&apikey=${API_KEY}`)\r\n    );\r\n    \r\n    const responses = await Promise.all(requests);\r\n    const data = await Promise.all(responses.map(res => res.json()));\r\n    \r\n    return data.map(item => ({\r\n      symbol: item['Global Quote']['01. symbol'],\r\n      price: parseFloat(item['Global Quote']['05. price']),\r\n      change: parseFloat(item['Global Quote']['09. change']),\r\n      changePercent: item['Global Quote']['10. change percent'],\r\n      volume: parseInt(item['Global Quote']['06. volume'])\r\n    }));\r\n  } catch (error) {\r\n    console.error(\"API Error, using mock data:\", error);\r\n    return mockStocks;\r\n  }\r\n};"],"mappings":"AAAA;AACA,SAASA,UAAU,QAAQ,YAAY;AAEvC,MAAMC,OAAO,GAAG,wBAAwB;AACxC,MAAMC,QAAQ,GAAG,mCAAmC;AAEpD,OAAO,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;EACxC,IAAI;IACF,MAAMC,OAAO,GAAG,CAAC,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,CAAC;IACzD,MAAMC,QAAQ,GAAGD,OAAO,CAACE,GAAG,CAACC,MAAM,IACjCC,KAAK,CAAC,GAAGN,QAAQ,iCAAiCK,MAAM,WAAWN,OAAO,EAAE,CAC9E,CAAC;IAED,MAAMQ,SAAS,GAAG,MAAMC,OAAO,CAACC,GAAG,CAACN,QAAQ,CAAC;IAC7C,MAAMO,IAAI,GAAG,MAAMF,OAAO,CAACC,GAAG,CAACF,SAAS,CAACH,GAAG,CAACO,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;IAEhE,OAAOF,IAAI,CAACN,GAAG,CAACS,IAAI,KAAK;MACvBR,MAAM,EAAEQ,IAAI,CAAC,cAAc,CAAC,CAAC,YAAY,CAAC;MAC1CC,KAAK,EAAEC,UAAU,CAACF,IAAI,CAAC,cAAc,CAAC,CAAC,WAAW,CAAC,CAAC;MACpDG,MAAM,EAAED,UAAU,CAACF,IAAI,CAAC,cAAc,CAAC,CAAC,YAAY,CAAC,CAAC;MACtDI,aAAa,EAAEJ,IAAI,CAAC,cAAc,CAAC,CAAC,oBAAoB,CAAC;MACzDK,MAAM,EAAEC,QAAQ,CAACN,IAAI,CAAC,cAAc,CAAC,CAAC,YAAY,CAAC;IACrD,CAAC,CAAC,CAAC;EACL,CAAC,CAAC,OAAOO,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,OAAOtB,UAAU;EACnB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}