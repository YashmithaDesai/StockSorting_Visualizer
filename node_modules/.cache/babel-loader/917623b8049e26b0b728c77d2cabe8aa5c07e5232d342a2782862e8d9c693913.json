{"ast":null,"code":"var _jsxFileName = \"/Users/shreya/Desktop/DAA(sem-4)/lab-EL/StockSorting_Visualizer/src/components/Visualizations/StockVisualization.js\",\n  _s = $RefreshSig$();\n// src/components/Visualizations/StockVisualization.js\nimport React, { useEffect, useState } from 'react';\nimport { sortingAlgorithms } from '../../algorithms/algorithmHelper';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StockVisualization = ({\n  stocks,\n  sortKey,\n  onStockSelect,\n  algorithm,\n  speed,\n  isRacing,\n  setMetrics\n}) => {\n  _s();\n  const [localStocks, setLocalStocks] = useState([...stocks]);\n  const [highlightedIndices, setHighlightedIndices] = useState([]);\n  const [currentMetrics, setCurrentMetrics] = useState({\n    comparisons: 0,\n    swaps: 0,\n    startTime: 0,\n    timeTaken: 0\n  });\n  useEffect(() => {\n    setLocalStocks([...stocks]);\n  }, [stocks]);\n  useEffect(() => {\n    if (isRacing && algorithm) {\n      const startSort = async () => {\n        const startTime = performance.now();\n        const initialMetrics = {\n          comparisons: 0,\n          swaps: 0,\n          startTime,\n          timeTaken: 0\n        };\n        setCurrentMetrics(initialMetrics);\n        setMetrics(initialMetrics);\n        const updateFn = async (updatedArray, indices, isSwap, delay) => {\n          return new Promise(resolve => {\n            setHighlightedIndices(indices);\n            setLocalStocks([...updatedArray]);\n            const newMetrics = {\n              ...currentMetrics,\n              comparisons: currentMetrics.comparisons + (indices && indices.length >= 2 ? 1 : 0),\n              swaps: currentMetrics.swaps + (isSwap ? 1 : 0),\n              timeTaken: performance.now() - startTime\n            };\n            setCurrentMetrics(newMetrics);\n            setMetrics(newMetrics);\n            setTimeout(resolve, delay);\n          });\n        };\n        try {\n          const sortFunction = sortingAlgorithms[algorithm];\n          if (sortFunction) {\n            const arrayCopy = [...localStocks];\n            const transformedArray = arrayCopy.map(stock => ({\n              ...stock,\n              sortValue: sortKey === 'change' || sortKey === 'changePercent' ? stock[sortKey] : stock.change >= 0 ? stock[sortKey] : -stock[sortKey]\n            }));\n            await sortFunction(transformedArray, 'sortValue', speed, updateFn);\n\n            // Final metrics update\n            const finalMetrics = {\n              ...currentMetrics,\n              timeTaken: performance.now() - startTime\n            };\n            setCurrentMetrics(finalMetrics);\n            setMetrics(finalMetrics);\n            setLocalStocks(transformedArray);\n          }\n        } catch (error) {\n          console.error('Sorting error:', error);\n        }\n      };\n      startSort();\n    } else {\n      setHighlightedIndices([]);\n      // Reset metrics when not racing\n      const resetMetrics = {\n        comparisons: 0,\n        swaps: 0,\n        startTime: 0,\n        timeTaken: 0\n      };\n      setCurrentMetrics(resetMetrics);\n      setMetrics(resetMetrics);\n    }\n  }, [isRacing, algorithm, speed, sortKey]);\n  const maxValue = Math.max(...localStocks.map(stock => Math.abs(stock[sortKey])));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"stock-visualization\",\n    children: localStocks.map((stock, index) => {\n      const value = stock[sortKey];\n      const isNegative = stock.change < 0;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `stock-item ${highlightedIndices.includes(index) ? 'highlighted' : ''}`,\n        onClick: () => onStockSelect(stock),\n        style: {\n          height: `${Math.abs(value) / maxValue * 100}%`,\n          backgroundColor: highlightedIndices.includes(index) ? '#FFD700' : isNegative ? '#F44336' : '#4CAF50',\n          transition: 'all 0.3s ease'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"stock-label\",\n          children: [stock.symbol, \": $\", typeof value === 'number' ? Math.abs(value).toFixed(2) : value, (sortKey === 'change' || sortKey === 'changePercent') && (isNegative ? ' (-) ' : ' (+) ')]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }, this)\n      }, stock.symbol, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n};\n_s(StockVisualization, \"hg+EAhmyV86kgkeDwI4H0BrPeeg=\");\n_c = StockVisualization;\nexport default StockVisualization;\nvar _c;\n$RefreshReg$(_c, \"StockVisualization\");","map":{"version":3,"names":["React","useEffect","useState","sortingAlgorithms","jsxDEV","_jsxDEV","StockVisualization","stocks","sortKey","onStockSelect","algorithm","speed","isRacing","setMetrics","_s","localStocks","setLocalStocks","highlightedIndices","setHighlightedIndices","currentMetrics","setCurrentMetrics","comparisons","swaps","startTime","timeTaken","startSort","performance","now","initialMetrics","updateFn","updatedArray","indices","isSwap","delay","Promise","resolve","newMetrics","length","setTimeout","sortFunction","arrayCopy","transformedArray","map","stock","sortValue","change","finalMetrics","error","console","resetMetrics","maxValue","Math","max","abs","className","children","index","value","isNegative","includes","onClick","style","height","backgroundColor","transition","symbol","toFixed","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/shreya/Desktop/DAA(sem-4)/lab-EL/StockSorting_Visualizer/src/components/Visualizations/StockVisualization.js"],"sourcesContent":["// src/components/Visualizations/StockVisualization.js\nimport React, { useEffect, useState } from 'react';\nimport { sortingAlgorithms } from '../../algorithms/algorithmHelper';\n\nconst StockVisualization = ({ \n  stocks, \n  sortKey, \n  onStockSelect, \n  algorithm,\n  speed,\n  isRacing,\n  setMetrics \n}) => {\n  const [localStocks, setLocalStocks] = useState([...stocks]);\n  const [highlightedIndices, setHighlightedIndices] = useState([]);\n  const [currentMetrics, setCurrentMetrics] = useState({\n    comparisons: 0,\n    swaps: 0,\n    startTime: 0,\n    timeTaken: 0\n  });\n\n  useEffect(() => {\n    setLocalStocks([...stocks]);\n  }, [stocks]);\n\n  useEffect(() => {\n    if (isRacing && algorithm) {\n      const startSort = async () => {\n        const startTime = performance.now();\n        const initialMetrics = {\n          comparisons: 0,\n          swaps: 0,\n          startTime,\n          timeTaken: 0\n        };\n        \n        setCurrentMetrics(initialMetrics);\n        setMetrics(initialMetrics);\n\n        const updateFn = async (updatedArray, indices, isSwap, delay) => {\n          return new Promise(resolve => {\n            setHighlightedIndices(indices);\n            setLocalStocks([...updatedArray]);\n            \n            const newMetrics = {\n              ...currentMetrics,\n              comparisons: currentMetrics.comparisons + (indices && indices.length >= 2 ? 1 : 0),\n              swaps: currentMetrics.swaps + (isSwap ? 1 : 0),\n              timeTaken: performance.now() - startTime\n            };\n            \n            setCurrentMetrics(newMetrics);\n            setMetrics(newMetrics);\n\n            setTimeout(resolve, delay);\n          });\n        };\n\n        try {\n          const sortFunction = sortingAlgorithms[algorithm];\n          if (sortFunction) {\n            const arrayCopy = [...localStocks];\n            const transformedArray = arrayCopy.map(stock => ({\n              ...stock,\n              sortValue: sortKey === 'change' || sortKey === 'changePercent' \n                ? stock[sortKey]\n                : stock.change >= 0 ? stock[sortKey] : -stock[sortKey]\n            }));\n            \n            await sortFunction(transformedArray, 'sortValue', speed, updateFn);\n            \n            // Final metrics update\n            const finalMetrics = {\n              ...currentMetrics,\n              timeTaken: performance.now() - startTime\n            };\n            setCurrentMetrics(finalMetrics);\n            setMetrics(finalMetrics);\n            \n            setLocalStocks(transformedArray);\n          }\n        } catch (error) {\n          console.error('Sorting error:', error);\n        }\n      };\n\n      startSort();\n    } else {\n      setHighlightedIndices([]);\n      // Reset metrics when not racing\n      const resetMetrics = {\n        comparisons: 0,\n        swaps: 0,\n        startTime: 0,\n        timeTaken: 0\n      };\n      setCurrentMetrics(resetMetrics);\n      setMetrics(resetMetrics);\n    }\n  }, [isRacing, algorithm, speed, sortKey]);\n\n  const maxValue = Math.max(...localStocks.map(stock => Math.abs(stock[sortKey])));\n\n  return (\n    <div className=\"stock-visualization\">\n      {localStocks.map((stock, index) => {\n        const value = stock[sortKey];\n        const isNegative = stock.change < 0;\n        \n        return (\n          <div \n            key={stock.symbol}\n            className={`stock-item ${highlightedIndices.includes(index) ? 'highlighted' : ''}`}\n            onClick={() => onStockSelect(stock)}\n            style={{\n              height: `${(Math.abs(value) / maxValue) * 100}%`,\n              backgroundColor: highlightedIndices.includes(index) \n                ? '#FFD700'\n                : isNegative ? '#F44336' : '#4CAF50',\n              transition: 'all 0.3s ease'\n            }}\n          >\n            <span className=\"stock-label\">\n              {stock.symbol}: ${typeof value === 'number' ? Math.abs(value).toFixed(2) : value}\n              {(sortKey === 'change' || sortKey === 'changePercent') && (isNegative ? ' (-) ' : ' (+) ')}\n            </span>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default StockVisualization;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}