{"ast":null,"code":"// Mock data fallback\nimport { mockStocks } from './mockData';\nconst API_KEY = 'DLI0RR31SQDEZK8G'; // Consider using environment variables\nconst BASE_URL = 'https://www.alphavantage.co/query';\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes cache\n\n// Cache storage\nconst apiCache = {\n  data: null,\n  lastFetch: null\n};\nexport const fetchStockData = async () => {\n  // Return cached data if available and not expired\n  if (apiCache.data && Date.now() - apiCache.lastFetch < CACHE_DURATION) {\n    return apiCache.data;\n  }\n  try {\n    const symbols = ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'META'];\n    const requests = symbols.map(symbol => {\n      // Add slight delay between requests to avoid rate limiting\n      return new Promise(resolve => setTimeout(resolve, 300)).then(() => fetch(`${BASE_URL}?function=GLOBAL_QUOTE&symbol=${symbol}&apikey=${API_KEY}`));\n    });\n    const responses = await Promise.all(requests);\n    const data = await Promise.all(responses.map(async res => {\n      if (!res.ok) throw new Error(`HTTP error! status: ${res.status}`);\n      return await res.json();\n    }));\n\n    // Validate and transform data\n    const validStocks = data.map(item => {\n      if (!item['Global Quote'] || !item['Global Quote']['01. symbol']) {\n        throw new Error('Invalid API response structure');\n      }\n      return {\n        symbol: item['Global Quote']['01. symbol'],\n        price: parseFloat(item['Global Quote']['05. price']) || 0,\n        change: parseFloat(item['Global Quote']['09. change']) || 0,\n        changePercent: item['Global Quote']['10. change percent'] || '0%',\n        volume: parseInt(item['Global Quote']['06. volume']) || 0,\n        lastUpdated: new Date().toISOString()\n      };\n    });\n\n    // Update cache\n    apiCache.data = validStocks;\n    apiCache.lastFetch = Date.now();\n    return validStocks;\n  } catch (error) {\n    console.error(\"API Error:\", error);\n    // Return cached data if available, otherwise mock data\n    return apiCache.data || mockStocks;\n  }\n};","map":{"version":3,"names":["mockStocks","API_KEY","BASE_URL","CACHE_DURATION","apiCache","data","lastFetch","fetchStockData","Date","now","symbols","requests","map","symbol","Promise","resolve","setTimeout","then","fetch","responses","all","res","ok","Error","status","json","validStocks","item","price","parseFloat","change","changePercent","volume","parseInt","lastUpdated","toISOString","error","console"],"sources":["/Users/shreya/Desktop/DAA(sem-4)/lab-EL/StockSorting_Visualizer/src/api/stockApi.js"],"sourcesContent":["// Mock data fallback\nimport { mockStocks } from './mockData';\n\nconst API_KEY = 'DLI0RR31SQDEZK8G'; // Consider using environment variables\nconst BASE_URL = 'https://www.alphavantage.co/query';\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes cache\n\n// Cache storage\nconst apiCache = {\n  data: null,\n  lastFetch: null\n};\n\nexport const fetchStockData = async () => {\n  // Return cached data if available and not expired\n  if (apiCache.data && Date.now() - apiCache.lastFetch < CACHE_DURATION) {\n    return apiCache.data;\n  }\n\n  try {\n    const symbols = ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'META'];\n    const requests = symbols.map(symbol => {\n      // Add slight delay between requests to avoid rate limiting\n      return new Promise(resolve => setTimeout(resolve, 300))\n        .then(() => fetch(`${BASE_URL}?function=GLOBAL_QUOTE&symbol=${symbol}&apikey=${API_KEY}`));\n    });\n    \n    const responses = await Promise.all(requests);\n    const data = await Promise.all(responses.map(async res => {\n      if (!res.ok) throw new Error(`HTTP error! status: ${res.status}`);\n      return await res.json();\n    }));\n\n    // Validate and transform data\n    const validStocks = data.map(item => {\n      if (!item['Global Quote'] || !item['Global Quote']['01. symbol']) {\n        throw new Error('Invalid API response structure');\n      }\n      return {\n        symbol: item['Global Quote']['01. symbol'],\n        price: parseFloat(item['Global Quote']['05. price']) || 0,\n        change: parseFloat(item['Global Quote']['09. change']) || 0,\n        changePercent: item['Global Quote']['10. change percent'] || '0%',\n        volume: parseInt(item['Global Quote']['06. volume']) || 0,\n        lastUpdated: new Date().toISOString()\n      };\n    });\n\n    // Update cache\n    apiCache.data = validStocks;\n    apiCache.lastFetch = Date.now();\n    \n    return validStocks;\n  } catch (error) {\n    console.error(\"API Error:\", error);\n    // Return cached data if available, otherwise mock data\n    return apiCache.data || mockStocks;\n  }\n};"],"mappings":"AAAA;AACA,SAASA,UAAU,QAAQ,YAAY;AAEvC,MAAMC,OAAO,GAAG,kBAAkB,CAAC,CAAC;AACpC,MAAMC,QAAQ,GAAG,mCAAmC;AACpD,MAAMC,cAAc,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;;AAEtC;AACA,MAAMC,QAAQ,GAAG;EACfC,IAAI,EAAE,IAAI;EACVC,SAAS,EAAE;AACb,CAAC;AAED,OAAO,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;EACxC;EACA,IAAIH,QAAQ,CAACC,IAAI,IAAIG,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGL,QAAQ,CAACE,SAAS,GAAGH,cAAc,EAAE;IACrE,OAAOC,QAAQ,CAACC,IAAI;EACtB;EAEA,IAAI;IACF,MAAMK,OAAO,GAAG,CAAC,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,CAAC;IACzD,MAAMC,QAAQ,GAAGD,OAAO,CAACE,GAAG,CAACC,MAAM,IAAI;MACrC;MACA,OAAO,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC,CACpDE,IAAI,CAAC,MAAMC,KAAK,CAAC,GAAGhB,QAAQ,iCAAiCW,MAAM,WAAWZ,OAAO,EAAE,CAAC,CAAC;IAC9F,CAAC,CAAC;IAEF,MAAMkB,SAAS,GAAG,MAAML,OAAO,CAACM,GAAG,CAACT,QAAQ,CAAC;IAC7C,MAAMN,IAAI,GAAG,MAAMS,OAAO,CAACM,GAAG,CAACD,SAAS,CAACP,GAAG,CAAC,MAAMS,GAAG,IAAI;MACxD,IAAI,CAACA,GAAG,CAACC,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,uBAAuBF,GAAG,CAACG,MAAM,EAAE,CAAC;MACjE,OAAO,MAAMH,GAAG,CAACI,IAAI,CAAC,CAAC;IACzB,CAAC,CAAC,CAAC;;IAEH;IACA,MAAMC,WAAW,GAAGrB,IAAI,CAACO,GAAG,CAACe,IAAI,IAAI;MACnC,IAAI,CAACA,IAAI,CAAC,cAAc,CAAC,IAAI,CAACA,IAAI,CAAC,cAAc,CAAC,CAAC,YAAY,CAAC,EAAE;QAChE,MAAM,IAAIJ,KAAK,CAAC,gCAAgC,CAAC;MACnD;MACA,OAAO;QACLV,MAAM,EAAEc,IAAI,CAAC,cAAc,CAAC,CAAC,YAAY,CAAC;QAC1CC,KAAK,EAAEC,UAAU,CAACF,IAAI,CAAC,cAAc,CAAC,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC;QACzDG,MAAM,EAAED,UAAU,CAACF,IAAI,CAAC,cAAc,CAAC,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC;QAC3DI,aAAa,EAAEJ,IAAI,CAAC,cAAc,CAAC,CAAC,oBAAoB,CAAC,IAAI,IAAI;QACjEK,MAAM,EAAEC,QAAQ,CAACN,IAAI,CAAC,cAAc,CAAC,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC;QACzDO,WAAW,EAAE,IAAI1B,IAAI,CAAC,CAAC,CAAC2B,WAAW,CAAC;MACtC,CAAC;IACH,CAAC,CAAC;;IAEF;IACA/B,QAAQ,CAACC,IAAI,GAAGqB,WAAW;IAC3BtB,QAAQ,CAACE,SAAS,GAAGE,IAAI,CAACC,GAAG,CAAC,CAAC;IAE/B,OAAOiB,WAAW;EACpB,CAAC,CAAC,OAAOU,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;IAClC;IACA,OAAOhC,QAAQ,CAACC,IAAI,IAAIL,UAAU;EACpC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}