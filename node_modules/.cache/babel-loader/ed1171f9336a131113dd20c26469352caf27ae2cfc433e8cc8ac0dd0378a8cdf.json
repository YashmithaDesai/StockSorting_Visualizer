{"ast":null,"code":"import { bubbleSort } from './bubbleSort';\nimport { mergeSort } from './mergeSort';\nimport { quickSort } from './quickSort';\nimport { heapSort } from './heapSort';\nexport const sortingAlgorithms = {\n  bubble: bubbleSort,\n  merge: mergeSort,\n  quick: quickSort,\n  heap: heapSort\n};\nexport const algorithmDescriptions = {\n  bubble: {\n    name: \"Bubble Sort\",\n    complexity: \"O(n²)\",\n    description: \"Repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order.\"\n  },\n  merge: {\n    name: \"Merge Sort\",\n    complexity: \"O(n log n)\",\n    description: \"Divides the unsorted list into n sublists, each containing one element, then repeatedly merges sublists to produce new sorted sublists.\"\n  },\n  quick: {\n    name: \"Quick Sort\",\n    complexity: \"O(n log n) average, O(n²) worst\",\n    description: \"Picks an element as pivot and partitions the array around the pivot, placing smaller elements before and larger after.\"\n  },\n  heap: {\n    name: \"Heap Sort\",\n    complexity: \"O(n log n)\",\n    description: \"Builds a max heap from the data and repeatedly extracts the maximum element, maintaining the heap property throughout.\"\n  }\n};","map":{"version":3,"names":["bubbleSort","mergeSort","quickSort","heapSort","sortingAlgorithms","bubble","merge","quick","heap","algorithmDescriptions","name","complexity","description"],"sources":["/Users/shreya/Desktop/DAA(sem-4)/lab-EL/StockSorting_Visualizer/src/algorithms/algorithmHelper.js"],"sourcesContent":["import { bubbleSort } from './bubbleSort';\nimport { mergeSort } from './mergeSort';\nimport { quickSort } from './quickSort';\nimport { heapSort } from './heapSort';\n\nexport const sortingAlgorithms = {\n  bubble: bubbleSort,\n  merge: mergeSort,\n  quick: quickSort,\n  heap: heapSort\n};\n\nexport const algorithmDescriptions = {\n  bubble: {\n    name: \"Bubble Sort\",\n    complexity: \"O(n²)\",\n    description: \"Repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order.\"\n  },\n  merge: {\n    name: \"Merge Sort\",\n    complexity: \"O(n log n)\",\n    description: \"Divides the unsorted list into n sublists, each containing one element, then repeatedly merges sublists to produce new sorted sublists.\"\n  },\n  quick: {\n    name: \"Quick Sort\",\n    complexity: \"O(n log n) average, O(n²) worst\",\n    description: \"Picks an element as pivot and partitions the array around the pivot, placing smaller elements before and larger after.\"\n  },\n  heap: {\n    name: \"Heap Sort\",\n    complexity: \"O(n log n)\",\n    description: \"Builds a max heap from the data and repeatedly extracts the maximum element, maintaining the heap property throughout.\"\n  }\n};"],"mappings":"AAAA,SAASA,UAAU,QAAQ,cAAc;AACzC,SAASC,SAAS,QAAQ,aAAa;AACvC,SAASC,SAAS,QAAQ,aAAa;AACvC,SAASC,QAAQ,QAAQ,YAAY;AAErC,OAAO,MAAMC,iBAAiB,GAAG;EAC/BC,MAAM,EAAEL,UAAU;EAClBM,KAAK,EAAEL,SAAS;EAChBM,KAAK,EAAEL,SAAS;EAChBM,IAAI,EAAEL;AACR,CAAC;AAED,OAAO,MAAMM,qBAAqB,GAAG;EACnCJ,MAAM,EAAE;IACNK,IAAI,EAAE,aAAa;IACnBC,UAAU,EAAE,OAAO;IACnBC,WAAW,EAAE;EACf,CAAC;EACDN,KAAK,EAAE;IACLI,IAAI,EAAE,YAAY;IAClBC,UAAU,EAAE,YAAY;IACxBC,WAAW,EAAE;EACf,CAAC;EACDL,KAAK,EAAE;IACLG,IAAI,EAAE,YAAY;IAClBC,UAAU,EAAE,iCAAiC;IAC7CC,WAAW,EAAE;EACf,CAAC;EACDJ,IAAI,EAAE;IACJE,IAAI,EAAE,WAAW;IACjBC,UAAU,EAAE,YAAY;IACxBC,WAAW,EAAE;EACf;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}