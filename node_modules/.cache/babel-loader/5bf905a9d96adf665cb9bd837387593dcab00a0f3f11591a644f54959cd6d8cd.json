{"ast":null,"code":"// Import mock data for fallback\nimport { mockStocks } from './mockData';\nconst API_KEY = '2RSK4I9Y1WP3PP3C'; // You'll need to get this from alphavantage.co\nconst BASE_URL = 'https://www.alphavantage.co/query';\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes cache\n\n// Cache storage\nconst apiCache = {\n  data: null,\n  lastFetch: null\n};\n\n// List of some popular stock symbols\nconst STOCK_SYMBOLS = ['AAPL', 'GOOGL', 'MSFT', 'AMZN', 'META', 'TSLA', 'NVDA', 'JPM', 'BAC', 'WMT', 'DIS', 'NFLX', 'INTC', 'AMD', 'UBER'];\nexport async function fetchStockData() {\n  // Check cache first\n  if (apiCache.data && Date.now() - apiCache.lastFetch < CACHE_DURATION) {\n    return apiCache.data;\n  }\n  try {\n    // Fetch data for multiple symbols in parallel\n    const promises = STOCK_SYMBOLS.map(symbol => fetch(`${BASE_URL}?function=GLOBAL_QUOTE&symbol=${symbol}&apikey=${API_KEY}`).then(response => {\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return response.json();\n    }));\n    const results = await Promise.all(promises);\n\n    // Transform the API response into our required format\n    const stocks = results.map((result, index) => {\n      const quote = result['Global Quote'];\n      if (!quote) return null;\n      return {\n        symbol: STOCK_SYMBOLS[index],\n        price: parseFloat(quote['05. price']) || 0,\n        change: parseFloat(quote['09. change']) || 0,\n        changePercent: parseFloat(quote['10. change percent'].replace('%', '')) || 0,\n        volume: parseInt(quote['06. volume']) || 0\n      };\n    }).filter(stock => stock !== null); // Remove any failed requests\n\n    // If we got no valid results, throw an error\n    if (stocks.length === 0) {\n      throw new Error('No valid stock data received');\n    }\n\n    // Update cache\n    apiCache.data = stocks;\n    apiCache.lastFetch = Date.now();\n    return stocks;\n  } catch (error) {\n    console.error('Error fetching stock data:', error);\n    // Return mock data if API fails\n    return mockStocks;\n  }\n}","map":{"version":3,"names":["mockStocks","API_KEY","BASE_URL","CACHE_DURATION","apiCache","data","lastFetch","STOCK_SYMBOLS","fetchStockData","Date","now","promises","map","symbol","fetch","then","response","ok","Error","status","json","results","Promise","all","stocks","result","index","quote","price","parseFloat","change","changePercent","replace","volume","parseInt","filter","stock","length","error","console"],"sources":["/Users/shreya/Desktop/DAA(sem-4)/lab-EL/StockSorting_Visualizer/src/api/stockApi.js"],"sourcesContent":["// Import mock data for fallback\nimport { mockStocks } from './mockData';\n\nconst API_KEY = '2RSK4I9Y1WP3PP3C'; // You'll need to get this from alphavantage.co\nconst BASE_URL = 'https://www.alphavantage.co/query';\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes cache\n\n// Cache storage\nconst apiCache = {\n  data: null,\n  lastFetch: null\n};\n\n// List of some popular stock symbols\nconst STOCK_SYMBOLS = [\n  'AAPL', 'GOOGL', 'MSFT', 'AMZN', 'META',\n  'TSLA', 'NVDA', 'JPM', 'BAC', 'WMT',\n  'DIS', 'NFLX', 'INTC', 'AMD', 'UBER'\n];\n\nexport async function fetchStockData() {\n  // Check cache first\n  if (apiCache.data && Date.now() - apiCache.lastFetch < CACHE_DURATION) {\n    return apiCache.data;\n  }\n\n  try {\n    // Fetch data for multiple symbols in parallel\n    const promises = STOCK_SYMBOLS.map(symbol =>\n      fetch(`${BASE_URL}?function=GLOBAL_QUOTE&symbol=${symbol}&apikey=${API_KEY}`)\n        .then(response => {\n          if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n          }\n          return response.json();\n        })\n    );\n\n    const results = await Promise.all(promises);\n    \n    // Transform the API response into our required format\n    const stocks = results\n      .map((result, index) => {\n        const quote = result['Global Quote'];\n        if (!quote) return null;\n\n        return {\n          symbol: STOCK_SYMBOLS[index],\n          price: parseFloat(quote['05. price']) || 0,\n          change: parseFloat(quote['09. change']) || 0,\n          changePercent: parseFloat(quote['10. change percent'].replace('%', '')) || 0,\n          volume: parseInt(quote['06. volume']) || 0,\n        };\n      })\n      .filter(stock => stock !== null); // Remove any failed requests\n\n    // If we got no valid results, throw an error\n    if (stocks.length === 0) {\n      throw new Error('No valid stock data received');\n    }\n\n    // Update cache\n    apiCache.data = stocks;\n    apiCache.lastFetch = Date.now();\n    \n    return stocks;\n  } catch (error) {\n    console.error('Error fetching stock data:', error);\n    // Return mock data if API fails\n    return mockStocks;\n  }\n}"],"mappings":"AAAA;AACA,SAASA,UAAU,QAAQ,YAAY;AAEvC,MAAMC,OAAO,GAAG,kBAAkB,CAAC,CAAC;AACpC,MAAMC,QAAQ,GAAG,mCAAmC;AACpD,MAAMC,cAAc,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;;AAEtC;AACA,MAAMC,QAAQ,GAAG;EACfC,IAAI,EAAE,IAAI;EACVC,SAAS,EAAE;AACb,CAAC;;AAED;AACA,MAAMC,aAAa,GAAG,CACpB,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EACvC,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EACnC,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,CACrC;AAED,OAAO,eAAeC,cAAcA,CAAA,EAAG;EACrC;EACA,IAAIJ,QAAQ,CAACC,IAAI,IAAII,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGN,QAAQ,CAACE,SAAS,GAAGH,cAAc,EAAE;IACrE,OAAOC,QAAQ,CAACC,IAAI;EACtB;EAEA,IAAI;IACF;IACA,MAAMM,QAAQ,GAAGJ,aAAa,CAACK,GAAG,CAACC,MAAM,IACvCC,KAAK,CAAC,GAAGZ,QAAQ,iCAAiCW,MAAM,WAAWZ,OAAO,EAAE,CAAC,CAC1Ec,IAAI,CAACC,QAAQ,IAAI;MAChB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBF,QAAQ,CAACG,MAAM,EAAE,CAAC;MAC3D;MACA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;IACxB,CAAC,CACL,CAAC;IAED,MAAMC,OAAO,GAAG,MAAMC,OAAO,CAACC,GAAG,CAACZ,QAAQ,CAAC;;IAE3C;IACA,MAAMa,MAAM,GAAGH,OAAO,CACnBT,GAAG,CAAC,CAACa,MAAM,EAAEC,KAAK,KAAK;MACtB,MAAMC,KAAK,GAAGF,MAAM,CAAC,cAAc,CAAC;MACpC,IAAI,CAACE,KAAK,EAAE,OAAO,IAAI;MAEvB,OAAO;QACLd,MAAM,EAAEN,aAAa,CAACmB,KAAK,CAAC;QAC5BE,KAAK,EAAEC,UAAU,CAACF,KAAK,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC;QAC1CG,MAAM,EAAED,UAAU,CAACF,KAAK,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC;QAC5CI,aAAa,EAAEF,UAAU,CAACF,KAAK,CAAC,oBAAoB,CAAC,CAACK,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC;QAC5EC,MAAM,EAAEC,QAAQ,CAACP,KAAK,CAAC,YAAY,CAAC,CAAC,IAAI;MAC3C,CAAC;IACH,CAAC,CAAC,CACDQ,MAAM,CAACC,KAAK,IAAIA,KAAK,KAAK,IAAI,CAAC,CAAC,CAAC;;IAEpC;IACA,IAAIZ,MAAM,CAACa,MAAM,KAAK,CAAC,EAAE;MACvB,MAAM,IAAInB,KAAK,CAAC,8BAA8B,CAAC;IACjD;;IAEA;IACAd,QAAQ,CAACC,IAAI,GAAGmB,MAAM;IACtBpB,QAAQ,CAACE,SAAS,GAAGG,IAAI,CAACC,GAAG,CAAC,CAAC;IAE/B,OAAOc,MAAM;EACf,CAAC,CAAC,OAAOc,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD;IACA,OAAOtC,UAAU;EACnB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}