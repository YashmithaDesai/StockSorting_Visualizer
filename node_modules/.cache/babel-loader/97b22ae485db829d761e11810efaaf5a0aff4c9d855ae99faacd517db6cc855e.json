{"ast":null,"code":"import { bubbleSort } from './bubbleSort';\nimport { mergeSort } from './mergeSort';\nimport { quickSort } from './quickSort';\nexport const sortingAlgorithms = {\n  bubble: bubbleSort,\n  merge: mergeSort,\n  quick: quickSort\n};\nexport const algorithmDescriptions = {\n  bubble: {\n    name: \"Bubble Sort\",\n    complexity: \"O(n²)\",\n    description: \"Repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order.\"\n  },\n  merge: {\n    name: \"Merge Sort\",\n    complexity: \"O(n log n)\",\n    description: \"Divides the unsorted list into n sublists, each containing one element, then repeatedly merges sublists to produce new sorted sublists.\"\n  },\n  quick: {\n    name: \"Quick Sort\",\n    complexity: \"O(n log n) average, O(n²) worst\",\n    description: \"Picks an element as pivot and partitions the array around the pivot, placing smaller elements before and larger after.\"\n  }\n};","map":{"version":3,"names":["bubbleSort","mergeSort","quickSort","sortingAlgorithms","bubble","merge","quick","algorithmDescriptions","name","complexity","description"],"sources":["C:/stock-sorting-visualizer/src/algorithms/algorithmHelper.js"],"sourcesContent":["import { bubbleSort } from './bubbleSort';\r\nimport { mergeSort } from './mergeSort';\r\nimport { quickSort } from './quickSort';\r\n\r\nexport const sortingAlgorithms = {\r\n  bubble: bubbleSort,\r\n  merge: mergeSort,\r\n  quick: quickSort\r\n};\r\n\r\nexport const algorithmDescriptions = {\r\n  bubble: {\r\n    name: \"Bubble Sort\",\r\n    complexity: \"O(n²)\",\r\n    description: \"Repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order.\"\r\n  },\r\n  merge: {\r\n    name: \"Merge Sort\",\r\n    complexity: \"O(n log n)\",\r\n    description: \"Divides the unsorted list into n sublists, each containing one element, then repeatedly merges sublists to produce new sorted sublists.\"\r\n  },\r\n  quick: {\r\n    name: \"Quick Sort\",\r\n    complexity: \"O(n log n) average, O(n²) worst\",\r\n    description: \"Picks an element as pivot and partitions the array around the pivot, placing smaller elements before and larger after.\"\r\n  }\r\n};"],"mappings":"AAAA,SAASA,UAAU,QAAQ,cAAc;AACzC,SAASC,SAAS,QAAQ,aAAa;AACvC,SAASC,SAAS,QAAQ,aAAa;AAEvC,OAAO,MAAMC,iBAAiB,GAAG;EAC/BC,MAAM,EAAEJ,UAAU;EAClBK,KAAK,EAAEJ,SAAS;EAChBK,KAAK,EAAEJ;AACT,CAAC;AAED,OAAO,MAAMK,qBAAqB,GAAG;EACnCH,MAAM,EAAE;IACNI,IAAI,EAAE,aAAa;IACnBC,UAAU,EAAE,OAAO;IACnBC,WAAW,EAAE;EACf,CAAC;EACDL,KAAK,EAAE;IACLG,IAAI,EAAE,YAAY;IAClBC,UAAU,EAAE,YAAY;IACxBC,WAAW,EAAE;EACf,CAAC;EACDJ,KAAK,EAAE;IACLE,IAAI,EAAE,YAAY;IAClBC,UAAU,EAAE,iCAAiC;IAC7CC,WAAW,EAAE;EACf;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}