{"ast":null,"code":"var _jsxFileName = \"/Users/shreya/Desktop/DAA(sem-4)/lab-EL/StockSorting_Visualizer/src/components/AlgorithmInfo/PseudoCodeDisplay.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst algorithmPseudoCode = {\n  bubble: [\"for i from 0 to array.length - 1\", \"  for j from 0 to array.length - i - 1\", \"    if array[j] > array[j + 1]\", \"      swap array[j] and array[j + 1]\", \"  end for\", \"end for\"],\n  quick: [\"function quickSort(array, low, high)\", \"  if low < high\", \"    pivot = partition(array, low, high)\", \"    quickSort(array, low, pivot - 1)\", \"    quickSort(array, pivot + 1, high)\", \"  end if\", \"\", \"function partition(array, low, high)\", \"  pivot = array[high]\", \"  i = low - 1\", \"  for j from low to high - 1\", \"    if array[j] <= pivot\", \"      i = i + 1\", \"      swap array[i] and array[j]\", \"  end for\", \"  swap array[i + 1] and array[high]\", \"  return i + 1\"],\n  merge: [\"function mergeSort(array)\", \"  if array.length <= 1\", \"    return array\", \"  middle = array.length / 2\", \"  left = mergeSort(array[0...middle])\", \"  right = mergeSort(array[middle...end])\", \"  return merge(left, right)\", \"\", \"function merge(left, right)\", \"  result = []\", \"  while left.length > 0 and right.length > 0\", \"    if left[0] <= right[0]\", \"      result.push(left.shift())\", \"    else\", \"      result.push(right.shift())\", \"  end while\", \"  return result + remaining left + remaining right\"],\n  heap: [\"function heapSort(array)\", \"  buildMaxHeap(array)\", \"  for i from array.length - 1 to 0\", \"    swap array[0] and array[i]\", \"    heapify(array, 0, i)\", \"  end for\", \"\", \"function buildMaxHeap(array)\", \"  for i from (array.length / 2) - 1 to 0\", \"    heapify(array, i, array.length)\", \"  end for\", \"\", \"function heapify(array, i, size)\", \"  largest = i\", \"  left = 2 * i + 1\", \"  right = 2 * i + 2\", \"  if left < size and array[left] > array[largest]\", \"    largest = left\", \"  if right < size and array[right] > array[largest]\", \"    largest = right\", \"  if largest != i\", \"    swap array[i] and array[largest]\", \"    heapify(array, largest, size)\"]\n};\nconst PseudoCodeDisplay = ({\n  algorithm,\n  currentStep\n}) => {\n  const pseudoCode = algorithmPseudoCode[algorithm] || [];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pseudo-code-display\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Pseudo Code\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      className: \"pseudo-code\",\n      children: pseudoCode.map((line, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `code-line ${currentStep === index ? 'current-step' : ''}`,\n        children: line\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n_c = PseudoCodeDisplay;\nexport default PseudoCodeDisplay;\nvar _c;\n$RefreshReg$(_c, \"PseudoCodeDisplay\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","algorithmPseudoCode","bubble","quick","merge","heap","PseudoCodeDisplay","algorithm","currentStep","pseudoCode","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","line","index","_c","$RefreshReg$"],"sources":["/Users/shreya/Desktop/DAA(sem-4)/lab-EL/StockSorting_Visualizer/src/components/AlgorithmInfo/PseudoCodeDisplay.js"],"sourcesContent":["import React from 'react';\n\nconst algorithmPseudoCode = {\n  bubble: [\n    \"for i from 0 to array.length - 1\",\n    \"  for j from 0 to array.length - i - 1\",\n    \"    if array[j] > array[j + 1]\",\n    \"      swap array[j] and array[j + 1]\",\n    \"  end for\",\n    \"end for\"\n  ],\n  quick: [\n    \"function quickSort(array, low, high)\",\n    \"  if low < high\",\n    \"    pivot = partition(array, low, high)\",\n    \"    quickSort(array, low, pivot - 1)\",\n    \"    quickSort(array, pivot + 1, high)\",\n    \"  end if\",\n    \"\",\n    \"function partition(array, low, high)\",\n    \"  pivot = array[high]\",\n    \"  i = low - 1\",\n    \"  for j from low to high - 1\",\n    \"    if array[j] <= pivot\",\n    \"      i = i + 1\",\n    \"      swap array[i] and array[j]\",\n    \"  end for\",\n    \"  swap array[i + 1] and array[high]\",\n    \"  return i + 1\"\n  ],\n  merge: [\n    \"function mergeSort(array)\",\n    \"  if array.length <= 1\",\n    \"    return array\",\n    \"  middle = array.length / 2\",\n    \"  left = mergeSort(array[0...middle])\",\n    \"  right = mergeSort(array[middle...end])\",\n    \"  return merge(left, right)\",\n    \"\",\n    \"function merge(left, right)\",\n    \"  result = []\",\n    \"  while left.length > 0 and right.length > 0\",\n    \"    if left[0] <= right[0]\",\n    \"      result.push(left.shift())\",\n    \"    else\",\n    \"      result.push(right.shift())\",\n    \"  end while\",\n    \"  return result + remaining left + remaining right\"\n  ],\n  heap: [\n    \"function heapSort(array)\",\n    \"  buildMaxHeap(array)\",\n    \"  for i from array.length - 1 to 0\",\n    \"    swap array[0] and array[i]\",\n    \"    heapify(array, 0, i)\",\n    \"  end for\",\n    \"\",\n    \"function buildMaxHeap(array)\",\n    \"  for i from (array.length / 2) - 1 to 0\",\n    \"    heapify(array, i, array.length)\",\n    \"  end for\",\n    \"\",\n    \"function heapify(array, i, size)\",\n    \"  largest = i\",\n    \"  left = 2 * i + 1\",\n    \"  right = 2 * i + 2\",\n    \"  if left < size and array[left] > array[largest]\",\n    \"    largest = left\",\n    \"  if right < size and array[right] > array[largest]\",\n    \"    largest = right\",\n    \"  if largest != i\",\n    \"    swap array[i] and array[largest]\",\n    \"    heapify(array, largest, size)\"\n  ]\n};\n\nconst PseudoCodeDisplay = ({ algorithm, currentStep }) => {\n  const pseudoCode = algorithmPseudoCode[algorithm] || [];\n  \n  return (\n    <div className=\"pseudo-code-display\">\n      <h4>Pseudo Code</h4>\n      <pre className=\"pseudo-code\">\n        {pseudoCode.map((line, index) => (\n          <div\n            key={index}\n            className={`code-line ${currentStep === index ? 'current-step' : ''}`}\n          >\n            {line}\n          </div>\n        ))}\n      </pre>\n    </div>\n  );\n};\n\nexport default PseudoCodeDisplay; "],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,mBAAmB,GAAG;EAC1BC,MAAM,EAAE,CACN,kCAAkC,EAClC,wCAAwC,EACxC,gCAAgC,EAChC,sCAAsC,EACtC,WAAW,EACX,SAAS,CACV;EACDC,KAAK,EAAE,CACL,sCAAsC,EACtC,iBAAiB,EACjB,yCAAyC,EACzC,sCAAsC,EACtC,uCAAuC,EACvC,UAAU,EACV,EAAE,EACF,sCAAsC,EACtC,uBAAuB,EACvB,eAAe,EACf,8BAA8B,EAC9B,0BAA0B,EAC1B,iBAAiB,EACjB,kCAAkC,EAClC,WAAW,EACX,qCAAqC,EACrC,gBAAgB,CACjB;EACDC,KAAK,EAAE,CACL,2BAA2B,EAC3B,wBAAwB,EACxB,kBAAkB,EAClB,6BAA6B,EAC7B,uCAAuC,EACvC,0CAA0C,EAC1C,6BAA6B,EAC7B,EAAE,EACF,6BAA6B,EAC7B,eAAe,EACf,8CAA8C,EAC9C,4BAA4B,EAC5B,iCAAiC,EACjC,UAAU,EACV,kCAAkC,EAClC,aAAa,EACb,oDAAoD,CACrD;EACDC,IAAI,EAAE,CACJ,0BAA0B,EAC1B,uBAAuB,EACvB,oCAAoC,EACpC,gCAAgC,EAChC,0BAA0B,EAC1B,WAAW,EACX,EAAE,EACF,8BAA8B,EAC9B,0CAA0C,EAC1C,qCAAqC,EACrC,WAAW,EACX,EAAE,EACF,kCAAkC,EAClC,eAAe,EACf,oBAAoB,EACpB,qBAAqB,EACrB,mDAAmD,EACnD,oBAAoB,EACpB,qDAAqD,EACrD,qBAAqB,EACrB,mBAAmB,EACnB,sCAAsC,EACtC,mCAAmC;AAEvC,CAAC;AAED,MAAMC,iBAAiB,GAAGA,CAAC;EAAEC,SAAS;EAAEC;AAAY,CAAC,KAAK;EACxD,MAAMC,UAAU,GAAGR,mBAAmB,CAACM,SAAS,CAAC,IAAI,EAAE;EAEvD,oBACEP,OAAA;IAAKU,SAAS,EAAC,qBAAqB;IAAAC,QAAA,gBAClCX,OAAA;MAAAW,QAAA,EAAI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACpBf,OAAA;MAAKU,SAAS,EAAC,aAAa;MAAAC,QAAA,EACzBF,UAAU,CAACO,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBAC1BlB,OAAA;QAEEU,SAAS,EAAE,aAAaF,WAAW,KAAKU,KAAK,GAAG,cAAc,GAAG,EAAE,EAAG;QAAAP,QAAA,EAErEM;MAAI,GAHAC,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIP,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACI,EAAA,GAlBIb,iBAAiB;AAoBvB,eAAeA,iBAAiB;AAAC,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}