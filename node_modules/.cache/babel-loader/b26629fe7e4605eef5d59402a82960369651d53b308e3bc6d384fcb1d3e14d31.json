{"ast":null,"code":"export async function mergeSort(array, key, speed, updateFn, start = 0, end = array.length - 1) {\n  if (start >= end) return array;\n  const mid = Math.floor((start + end) / 2);\n  await mergeSort(array, key, speed, updateFn, start, mid);\n  await mergeSort(array, key, speed, updateFn, mid + 1, end);\n  await merge(array, key, speed, updateFn, start, mid, end);\n  return array;\n}\nasync function merge(array, key, speed, updateFn, start, mid, end) {\n  let temp = [];\n  let i = start;\n  let j = mid + 1;\n  while (i <= mid && j <= end) {\n    // Highlight the elements being compared\n    await updateFn(array, [i, j], false, speed);\n    if (array[i][key] <= array[j][key]) {\n      temp.push(array[i++]);\n    } else {\n      temp.push(array[j++]);\n    }\n  }\n  while (i <= mid) {\n    temp.push(array[i++]);\n  }\n  while (j <= end) {\n    temp.push(array[j++]);\n  }\n  for (let k = start; k <= end; k++) {\n    array[k] = temp[k - start];\n    // Show the merge in action\n    await updateFn(array, [k], true, speed);\n  }\n}","map":{"version":3,"names":["mergeSort","array","key","speed","updateFn","start","end","length","mid","Math","floor","merge","temp","i","j","push","k"],"sources":["/Users/shreya/Desktop/DAA(sem-4)/lab-EL/StockSorting_Visualizer/src/algorithms/mergeSort.js"],"sourcesContent":["export async function mergeSort(array, key, speed, updateFn, start = 0, end = array.length - 1) {\n    if (start >= end) return array;\n\n    const mid = Math.floor((start + end) / 2);\n    \n    await mergeSort(array, key, speed, updateFn, start, mid);\n    await mergeSort(array, key, speed, updateFn, mid + 1, end);\n    await merge(array, key, speed, updateFn, start, mid, end);\n    \n    return array;\n}\n\nasync function merge(array, key, speed, updateFn, start, mid, end) {\n    let temp = [];\n    let i = start;\n    let j = mid + 1;\n\n    while (i <= mid && j <= end) {\n        // Highlight the elements being compared\n        await updateFn(array, [i, j], false, speed);\n\n        if (array[i][key] <= array[j][key]) {\n            temp.push(array[i++]);\n        } else {\n            temp.push(array[j++]);\n        }\n    }\n\n    while (i <= mid) {\n        temp.push(array[i++]);\n    }\n\n    while (j <= end) {\n        temp.push(array[j++]);\n    }\n\n    for (let k = start; k <= end; k++) {\n        array[k] = temp[k - start];\n        // Show the merge in action\n        await updateFn(array, [k], true, speed);\n    }\n}"],"mappings":"AAAA,OAAO,eAAeA,SAASA,CAACC,KAAK,EAAEC,GAAG,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,KAAK,GAAG,CAAC,EAAEC,GAAG,GAAGL,KAAK,CAACM,MAAM,GAAG,CAAC,EAAE;EAC5F,IAAIF,KAAK,IAAIC,GAAG,EAAE,OAAOL,KAAK;EAE9B,MAAMO,GAAG,GAAGC,IAAI,CAACC,KAAK,CAAC,CAACL,KAAK,GAAGC,GAAG,IAAI,CAAC,CAAC;EAEzC,MAAMN,SAAS,CAACC,KAAK,EAAEC,GAAG,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,KAAK,EAAEG,GAAG,CAAC;EACxD,MAAMR,SAAS,CAACC,KAAK,EAAEC,GAAG,EAAEC,KAAK,EAAEC,QAAQ,EAAEI,GAAG,GAAG,CAAC,EAAEF,GAAG,CAAC;EAC1D,MAAMK,KAAK,CAACV,KAAK,EAAEC,GAAG,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,KAAK,EAAEG,GAAG,EAAEF,GAAG,CAAC;EAEzD,OAAOL,KAAK;AAChB;AAEA,eAAeU,KAAKA,CAACV,KAAK,EAAEC,GAAG,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,KAAK,EAAEG,GAAG,EAAEF,GAAG,EAAE;EAC/D,IAAIM,IAAI,GAAG,EAAE;EACb,IAAIC,CAAC,GAAGR,KAAK;EACb,IAAIS,CAAC,GAAGN,GAAG,GAAG,CAAC;EAEf,OAAOK,CAAC,IAAIL,GAAG,IAAIM,CAAC,IAAIR,GAAG,EAAE;IACzB;IACA,MAAMF,QAAQ,CAACH,KAAK,EAAE,CAACY,CAAC,EAAEC,CAAC,CAAC,EAAE,KAAK,EAAEX,KAAK,CAAC;IAE3C,IAAIF,KAAK,CAACY,CAAC,CAAC,CAACX,GAAG,CAAC,IAAID,KAAK,CAACa,CAAC,CAAC,CAACZ,GAAG,CAAC,EAAE;MAChCU,IAAI,CAACG,IAAI,CAACd,KAAK,CAACY,CAAC,EAAE,CAAC,CAAC;IACzB,CAAC,MAAM;MACHD,IAAI,CAACG,IAAI,CAACd,KAAK,CAACa,CAAC,EAAE,CAAC,CAAC;IACzB;EACJ;EAEA,OAAOD,CAAC,IAAIL,GAAG,EAAE;IACbI,IAAI,CAACG,IAAI,CAACd,KAAK,CAACY,CAAC,EAAE,CAAC,CAAC;EACzB;EAEA,OAAOC,CAAC,IAAIR,GAAG,EAAE;IACbM,IAAI,CAACG,IAAI,CAACd,KAAK,CAACa,CAAC,EAAE,CAAC,CAAC;EACzB;EAEA,KAAK,IAAIE,CAAC,GAAGX,KAAK,EAAEW,CAAC,IAAIV,GAAG,EAAEU,CAAC,EAAE,EAAE;IAC/Bf,KAAK,CAACe,CAAC,CAAC,GAAGJ,IAAI,CAACI,CAAC,GAAGX,KAAK,CAAC;IAC1B;IACA,MAAMD,QAAQ,CAACH,KAAK,EAAE,CAACe,CAAC,CAAC,EAAE,IAAI,EAAEb,KAAK,CAAC;EAC3C;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}