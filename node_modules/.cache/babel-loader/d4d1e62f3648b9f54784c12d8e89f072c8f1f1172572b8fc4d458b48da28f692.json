{"ast":null,"code":"// Import mock data for fallback\nimport { mockStocks } from './mockData';\nconst RAPID_API_KEY = 'dc1be977cdmsh79d0494f0038291p1a31f6jsncbb77d658c1d';\nconst BASE_URL = 'https://yahoo-finance15.p.rapidapi.com/api/yahoo/mo/quote';\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes cache\n\n// Cache storage\nconst apiCache = {\n  data: null,\n  lastFetch: null\n};\n\n// List of some popular stock symbols\nconst STOCK_SYMBOLS = ['AAPL', 'GOOGL', 'MSFT', 'AMZN', 'META', 'TSLA', 'NVDA', 'JPM', 'BAC', 'WMT', 'DIS', 'NFLX', 'INTC', 'AMD', 'UBER'];\nexport async function fetchStockData() {\n  // Check cache first\n  if (apiCache.data && Date.now() - apiCache.lastFetch < CACHE_DURATION) {\n    console.log('üîµ Using cached data');\n    return apiCache.data;\n  }\n  console.log('üîÑ Fetching live data from Yahoo Finance API...');\n  try {\n    // Fetch data for each symbol individually to ensure reliability\n    const stockPromises = STOCK_SYMBOLS.map(async symbol => {\n      try {\n        const response = await fetch(`${BASE_URL}/${symbol}`, {\n          method: 'GET',\n          headers: {\n            'X-RapidAPI-Key': RAPID_API_KEY,\n            'X-RapidAPI-Host': 'yahoo-finance15.p.rapidapi.com'\n          }\n        });\n        if (!response.ok) {\n          console.warn(`Failed to fetch data for ${symbol}: ${response.status}`);\n          return null;\n        }\n        const data = await response.json();\n\n        // Extract the required data from the response\n        if (data && data.body && data.body.length > 0) {\n          const stockData = data.body[0];\n          return {\n            symbol: symbol,\n            price: parseFloat(stockData.regularMarketPrice || 0),\n            change: parseFloat(stockData.regularMarketChange || 0),\n            changePercent: parseFloat(stockData.regularMarketChangePercent || 0),\n            volume: parseInt(stockData.regularMarketVolume || 0)\n          };\n        }\n        return null;\n      } catch (error) {\n        console.warn(`Error fetching ${symbol}:`, error.message);\n        return null;\n      }\n    });\n\n    // Wait for all requests to complete\n    const results = await Promise.all(stockPromises);\n\n    // Filter out any failed requests\n    const stocks = results.filter(stock => stock !== null);\n\n    // If we got no valid results, throw an error\n    if (stocks.length === 0) {\n      throw new Error('No valid stock data received');\n    }\n    console.log('‚úÖ Successfully fetched live data');\n    console.table(stocks.map(s => ({\n      symbol: s.symbol,\n      price: s.price,\n      change: s.change\n    })));\n\n    // Update cache\n    apiCache.data = stocks;\n    apiCache.lastFetch = Date.now();\n    return stocks;\n  } catch (error) {\n    console.error('‚ùå API Error:', error.message);\n    console.log('‚ö†Ô∏è Using fallback mock data');\n    return mockStocks;\n  }\n}","map":{"version":3,"names":["mockStocks","RAPID_API_KEY","BASE_URL","CACHE_DURATION","apiCache","data","lastFetch","STOCK_SYMBOLS","fetchStockData","Date","now","console","log","stockPromises","map","symbol","response","fetch","method","headers","ok","warn","status","json","body","length","stockData","price","parseFloat","regularMarketPrice","change","regularMarketChange","changePercent","regularMarketChangePercent","volume","parseInt","regularMarketVolume","error","message","results","Promise","all","stocks","filter","stock","Error","table","s"],"sources":["/Users/shreya/Desktop/DAA(sem-4)/lab-EL/StockSorting_Visualizer/src/api/stockApi.js"],"sourcesContent":["// Import mock data for fallback\nimport { mockStocks } from './mockData';\n\nconst RAPID_API_KEY = 'dc1be977cdmsh79d0494f0038291p1a31f6jsncbb77d658c1d';\nconst BASE_URL = 'https://yahoo-finance15.p.rapidapi.com/api/yahoo/mo/quote';\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes cache\n\n// Cache storage\nconst apiCache = {\n  data: null,\n  lastFetch: null\n};\n\n// List of some popular stock symbols\nconst STOCK_SYMBOLS = [\n  'AAPL', 'GOOGL', 'MSFT', 'AMZN', 'META',\n  'TSLA', 'NVDA', 'JPM', 'BAC', 'WMT',\n  'DIS', 'NFLX', 'INTC', 'AMD', 'UBER'\n];\n\nexport async function fetchStockData() {\n  // Check cache first\n  if (apiCache.data && Date.now() - apiCache.lastFetch < CACHE_DURATION) {\n    console.log('üîµ Using cached data');\n    return apiCache.data;\n  }\n\n  console.log('üîÑ Fetching live data from Yahoo Finance API...');\n  \n  try {\n    // Fetch data for each symbol individually to ensure reliability\n    const stockPromises = STOCK_SYMBOLS.map(async (symbol) => {\n      try {\n        const response = await fetch(`${BASE_URL}/${symbol}`, {\n          method: 'GET',\n          headers: {\n            'X-RapidAPI-Key': RAPID_API_KEY,\n            'X-RapidAPI-Host': 'yahoo-finance15.p.rapidapi.com'\n          }\n        });\n\n        if (!response.ok) {\n          console.warn(`Failed to fetch data for ${symbol}: ${response.status}`);\n          return null;\n        }\n\n        const data = await response.json();\n        \n        // Extract the required data from the response\n        if (data && data.body && data.body.length > 0) {\n          const stockData = data.body[0];\n          return {\n            symbol: symbol,\n            price: parseFloat(stockData.regularMarketPrice || 0),\n            change: parseFloat(stockData.regularMarketChange || 0),\n            changePercent: parseFloat(stockData.regularMarketChangePercent || 0),\n            volume: parseInt(stockData.regularMarketVolume || 0)\n          };\n        }\n        return null;\n      } catch (error) {\n        console.warn(`Error fetching ${symbol}:`, error.message);\n        return null;\n      }\n    });\n\n    // Wait for all requests to complete\n    const results = await Promise.all(stockPromises);\n    \n    // Filter out any failed requests\n    const stocks = results.filter(stock => stock !== null);\n\n    // If we got no valid results, throw an error\n    if (stocks.length === 0) {\n      throw new Error('No valid stock data received');\n    }\n\n    console.log('‚úÖ Successfully fetched live data');\n    console.table(stocks.map(s => ({\n      symbol: s.symbol,\n      price: s.price,\n      change: s.change\n    })));\n\n    // Update cache\n    apiCache.data = stocks;\n    apiCache.lastFetch = Date.now();\n    \n    return stocks;\n  } catch (error) {\n    console.error('‚ùå API Error:', error.message);\n    console.log('‚ö†Ô∏è Using fallback mock data');\n    return mockStocks;\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}