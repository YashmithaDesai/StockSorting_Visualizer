{"ast":null,"code":"var _jsxFileName = \"/Users/shreya/Desktop/DAA(sem-4)/lab-EL/StockSorting_Visualizer/src/components/Visualizations/ScatterPlot.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ScatterPlot = ({\n  data,\n  sortKey\n}) => {\n  const maxValue = Math.max(...data.map(item => item[sortKey]));\n  const chartSize = 500;\n  const pointRadius = 12;\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    className: \"scatter-plot\",\n    width: chartSize,\n    height: chartSize,\n    children: [/*#__PURE__*/_jsxDEV(\"line\", {\n      x1: \"0\",\n      y1: chartSize,\n      x2: chartSize,\n      y2: chartSize,\n      stroke: \"#333\",\n      strokeWidth: \"2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n      x1: \"0\",\n      y1: \"0\",\n      x2: \"0\",\n      y2: chartSize,\n      stroke: \"#333\",\n      strokeWidth: \"2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }, this), [0.2, 0.4, 0.6, 0.8, 1.0].map((ratio, i) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"line\", {\n        x1: 0,\n        y1: chartSize * (1 - ratio),\n        x2: chartSize,\n        y2: chartSize * (1 - ratio),\n        stroke: \"#ddd\",\n        strokeWidth: \"1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n        x: -30,\n        y: chartSize * (1 - ratio) + 5,\n        fontSize: \"10\",\n        children: [\"$\", (maxValue * ratio).toFixed(0)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 21\n      }, this)]\n    }, i, true, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 17\n    }, this)), data.map((stock, i) => {\n      const x = i / data.length * chartSize * 0.9 + chartSize * 0.05;\n      const y = chartSize - stock[sortKey] / maxValue * chartSize * 0.9;\n      const isPositive = stock.change >= 0;\n      return /*#__PURE__*/_jsxDEV(\"g\", {\n        children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: x,\n          cy: y,\n          r: pointRadius,\n          fill: isPositive ? '#4CAF50' : '#F44336'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: x,\n          y: y - pointRadius - 5,\n          textAnchor: \"middle\",\n          fontSize: \"12\",\n          children: stock.symbol\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: x,\n          y: y + pointRadius + 15,\n          textAnchor: \"middle\",\n          fontSize: \"10\",\n          children: [\"Vol: \", (stock.volume / 1000000).toFixed(1), \"M\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 25\n        }, this)]\n      }, stock.symbol, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 21\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 9\n  }, this);\n};\n_c = ScatterPlot;\nexport default ScatterPlot;\nvar _c;\n$RefreshReg$(_c, \"ScatterPlot\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","ScatterPlot","data","sortKey","maxValue","Math","max","map","item","chartSize","pointRadius","className","width","height","children","x1","y1","x2","y2","stroke","strokeWidth","fileName","_jsxFileName","lineNumber","columnNumber","ratio","i","Fragment","x","y","fontSize","toFixed","stock","length","isPositive","change","cx","cy","r","fill","textAnchor","symbol","volume","_c","$RefreshReg$"],"sources":["/Users/shreya/Desktop/DAA(sem-4)/lab-EL/StockSorting_Visualizer/src/components/Visualizations/ScatterPlot.js"],"sourcesContent":["import React from 'react';\n\nconst ScatterPlot = ({ data, sortKey }) => {\n    const maxValue = Math.max(...data.map(item => item[sortKey]));\n    const chartSize = 500;\n    const pointRadius = 12;\n\n    return (\n        <svg className=\"scatter-plot\" width={chartSize} height={chartSize}>\n            {/* X and Y axes */}\n            <line x1=\"0\" y1={chartSize} x2={chartSize} y2={chartSize} stroke=\"#333\" strokeWidth=\"2\" />\n            <line x1=\"0\" y1=\"0\" x2=\"0\" y2={chartSize} stroke=\"#333\" strokeWidth=\"2\" />\n            \n            {/* Grid lines and labels */}\n            {[0.2, 0.4, 0.6, 0.8, 1.0].map((ratio, i) => (\n                <React.Fragment key={i}>\n                    <line \n                        x1={0} \n                        y1={chartSize * (1 - ratio)} \n                        x2={chartSize} \n                        y2={chartSize * (1 - ratio)} \n                        stroke=\"#ddd\" \n                        strokeWidth=\"1\" \n                    />\n                    <text x={-30} y={chartSize * (1 - ratio) + 5} fontSize=\"10\">\n                        ${(maxValue * ratio).toFixed(0)}\n                    </text>\n                </React.Fragment>\n            ))}\n            \n            {/* Data points */}\n            {data.map((stock, i) => {\n                const x = (i / data.length) * chartSize * 0.9 + chartSize * 0.05;\n                const y = chartSize - (stock[sortKey] / maxValue) * chartSize * 0.9;\n                const isPositive = stock.change >= 0;\n                \n                return (\n                    <g key={stock.symbol}>\n                        <circle\n                            cx={x}\n                            cy={y}\n                            r={pointRadius}\n                            fill={isPositive ? '#4CAF50' : '#F44336'}\n                        />\n                        <text\n                            x={x}\n                            y={y - pointRadius - 5}\n                            textAnchor=\"middle\"\n                            fontSize=\"12\"\n                        >\n                            {stock.symbol}\n                        </text>\n                        <text\n                            x={x}\n                            y={y + pointRadius + 15}\n                            textAnchor=\"middle\"\n                            fontSize=\"10\"\n                        >\n                            Vol: {(stock.volume / 1000000).toFixed(1)}M\n                        </text>\n                    </g>\n                );\n            })}\n        </svg>\n    );\n};\n\nexport default ScatterPlot;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}