{"ast":null,"code":"import bubbleSort from './bubbleSort';\nimport quickSort from './quickSort';\nimport mergeSort from './mergeSort';\nimport heapSort from './heapSort';\nexport const sortingAlgorithms = {\n  bubble: bubbleSort,\n  quick: quickSort,\n  merge: mergeSort,\n  heap: heapSort\n};\nexport const algorithmDescriptions = {\n  bubble: {\n    name: 'Bubble Sort',\n    description: 'A simple sorting algorithm that repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order.',\n    complexity: 'O(n²)',\n    bestCase: 'O(n)',\n    worstCase: 'O(n²)'\n  },\n  quick: {\n    name: 'Quick Sort',\n    description: 'A divide-and-conquer algorithm that works by selecting a pivot element and partitioning the array around it.',\n    complexity: 'O(n log n)',\n    bestCase: 'O(n log n)',\n    worstCase: 'O(n²)'\n  },\n  merge: {\n    name: 'Merge Sort',\n    description: 'A divide-and-conquer algorithm that divides the array into smaller subarrays, sorts them, and then merges them back together.',\n    complexity: 'O(n log n)',\n    bestCase: 'O(n log n)',\n    worstCase: 'O(n log n)'\n  },\n  heap: {\n    name: 'Heap Sort',\n    description: 'A comparison-based sorting algorithm that uses a binary heap data structure to build a max-heap and then repeatedly extracts the maximum element.',\n    complexity: 'O(n log n)',\n    bestCase: 'O(n log n)',\n    worstCase: 'O(n log n)'\n  }\n};","map":{"version":3,"names":["bubbleSort","quickSort","mergeSort","heapSort","sortingAlgorithms","bubble","quick","merge","heap","algorithmDescriptions","name","description","complexity","bestCase","worstCase"],"sources":["/Users/shreya/Desktop/DAA(sem-4)/lab-EL/StockSorting_Visualizer/src/algorithms/algorithmHelper.js"],"sourcesContent":["import bubbleSort from './bubbleSort';\nimport quickSort from './quickSort';\nimport mergeSort from './mergeSort';\nimport heapSort from './heapSort';\n\nexport const sortingAlgorithms = {\n  bubble: bubbleSort,\n  quick: quickSort,\n  merge: mergeSort,\n  heap: heapSort\n};\n\nexport const algorithmDescriptions = {\n  bubble: {\n    name: 'Bubble Sort',\n    description: 'A simple sorting algorithm that repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order.',\n    complexity: 'O(n²)',\n    bestCase: 'O(n)',\n    worstCase: 'O(n²)'\n  },\n  quick: {\n    name: 'Quick Sort',\n    description: 'A divide-and-conquer algorithm that works by selecting a pivot element and partitioning the array around it.',\n    complexity: 'O(n log n)',\n    bestCase: 'O(n log n)',\n    worstCase: 'O(n²)'\n  },\n  merge: {\n    name: 'Merge Sort',\n    description: 'A divide-and-conquer algorithm that divides the array into smaller subarrays, sorts them, and then merges them back together.',\n    complexity: 'O(n log n)',\n    bestCase: 'O(n log n)',\n    worstCase: 'O(n log n)'\n  },\n  heap: {\n    name: 'Heap Sort',\n    description: 'A comparison-based sorting algorithm that uses a binary heap data structure to build a max-heap and then repeatedly extracts the maximum element.',\n    complexity: 'O(n log n)',\n    bestCase: 'O(n log n)',\n    worstCase: 'O(n log n)'\n  }\n};"],"mappings":"AAAA,OAAOA,UAAU,MAAM,cAAc;AACrC,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAOC,QAAQ,MAAM,YAAY;AAEjC,OAAO,MAAMC,iBAAiB,GAAG;EAC/BC,MAAM,EAAEL,UAAU;EAClBM,KAAK,EAAEL,SAAS;EAChBM,KAAK,EAAEL,SAAS;EAChBM,IAAI,EAAEL;AACR,CAAC;AAED,OAAO,MAAMM,qBAAqB,GAAG;EACnCJ,MAAM,EAAE;IACNK,IAAI,EAAE,aAAa;IACnBC,WAAW,EAAE,8IAA8I;IAC3JC,UAAU,EAAE,OAAO;IACnBC,QAAQ,EAAE,MAAM;IAChBC,SAAS,EAAE;EACb,CAAC;EACDR,KAAK,EAAE;IACLI,IAAI,EAAE,YAAY;IAClBC,WAAW,EAAE,8GAA8G;IAC3HC,UAAU,EAAE,YAAY;IACxBC,QAAQ,EAAE,YAAY;IACtBC,SAAS,EAAE;EACb,CAAC;EACDP,KAAK,EAAE;IACLG,IAAI,EAAE,YAAY;IAClBC,WAAW,EAAE,+HAA+H;IAC5IC,UAAU,EAAE,YAAY;IACxBC,QAAQ,EAAE,YAAY;IACtBC,SAAS,EAAE;EACb,CAAC;EACDN,IAAI,EAAE;IACJE,IAAI,EAAE,WAAW;IACjBC,WAAW,EAAE,mJAAmJ;IAChKC,UAAU,EAAE,YAAY;IACxBC,QAAQ,EAAE,YAAY;IACtBC,SAAS,EAAE;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}