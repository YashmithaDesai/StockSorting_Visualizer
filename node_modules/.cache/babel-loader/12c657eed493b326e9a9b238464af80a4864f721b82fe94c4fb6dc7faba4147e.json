{"ast":null,"code":"const mergeSort = async (array, key, speed, updateFn) => {\n  let totalComparisons = 0;\n  let totalSwaps = 0;\n  const merge = async (left, right) => {\n    const result = [];\n    let leftIndex = 0;\n    let rightIndex = 0;\n\n    // Pseudo code step 9: Start merge\n    await updateFn(array, [], false, speed, null, 9);\n\n    // Pseudo code step 10-11: Compare and merge while both arrays have elements\n    while (leftIndex < left.length && rightIndex < right.length) {\n      totalComparisons++;\n      await updateFn(array, [leftIndex, right.length + rightIndex], false, speed, null, 11);\n      if (left[leftIndex][key] <= right[rightIndex][key]) {\n        result.push(left[leftIndex]);\n        leftIndex++;\n      } else {\n        result.push(right[rightIndex]);\n        rightIndex++;\n        totalSwaps++;\n      }\n    }\n\n    // Pseudo code step 16: Add remaining elements\n    await updateFn(array, [], false, speed, null, 16);\n    return result.concat(left.slice(leftIndex)).concat(right.slice(rightIndex));\n  };\n  const mergeSortHelper = async arr => {\n    // Base case\n    if (arr.length <= 1) {\n      // Pseudo code step 1-2: Check array length\n      await updateFn(array, [], false, speed, null, 1);\n      return arr;\n    }\n\n    // Pseudo code step 3-4: Split array\n    const middle = Math.floor(arr.length / 2);\n    await updateFn(array, [], false, speed, null, 3);\n\n    // Recursively sort left and right halves\n    // Pseudo code step 5: Sort left half\n    await updateFn(array, arr.slice(0, middle).map(item => array.indexOf(item)), false, speed, null, 5);\n    const left = await mergeSortHelper(arr.slice(0, middle));\n\n    // Pseudo code step 6: Sort right half\n    await updateFn(array, arr.slice(middle).map(item => array.indexOf(item)), false, speed, null, 6);\n    const right = await mergeSortHelper(arr.slice(middle));\n\n    // Merge the sorted halves\n    // Pseudo code step 7: Merge halves\n    await updateFn(array, [], false, speed, null, 7);\n    const merged = await merge(left, right);\n\n    // Update the original array with merged results\n    merged.forEach((item, index) => {\n      const originalIndex = array.indexOf(item);\n      if (originalIndex !== index) {\n        array[originalIndex] = array[index];\n        array[index] = item;\n      }\n    });\n    return merged;\n  };\n  await mergeSortHelper([...array]);\n\n  // Final update with metrics\n  await updateFn(array, [], false, speed, {\n    totalComparisons,\n    totalSwaps\n  }, 17);\n  return array;\n};\nexport default mergeSort;","map":{"version":3,"names":["mergeSort","array","key","speed","updateFn","totalComparisons","totalSwaps","merge","left","right","result","leftIndex","rightIndex","length","push","concat","slice","mergeSortHelper","arr","middle","Math","floor","map","item","indexOf","merged","forEach","index","originalIndex"],"sources":["/Users/shreya/Desktop/DAA(sem-4)/lab-EL/StockSorting_Visualizer/src/algorithms/mergeSort.js"],"sourcesContent":["const mergeSort = async (array, key, speed, updateFn) => {\n  let totalComparisons = 0;\n  let totalSwaps = 0;\n\n  const merge = async (left, right) => {\n    const result = [];\n    let leftIndex = 0;\n    let rightIndex = 0;\n\n    // Pseudo code step 9: Start merge\n    await updateFn(array, [], false, speed, null, 9);\n\n    // Pseudo code step 10-11: Compare and merge while both arrays have elements\n    while (leftIndex < left.length && rightIndex < right.length) {\n      totalComparisons++;\n      await updateFn(array, [leftIndex, right.length + rightIndex], false, speed, null, 11);\n\n      if (left[leftIndex][key] <= right[rightIndex][key]) {\n        result.push(left[leftIndex]);\n        leftIndex++;\n      } else {\n        result.push(right[rightIndex]);\n        rightIndex++;\n        totalSwaps++;\n      }\n    }\n\n    // Pseudo code step 16: Add remaining elements\n    await updateFn(array, [], false, speed, null, 16);\n    \n    return result.concat(left.slice(leftIndex)).concat(right.slice(rightIndex));\n  };\n\n  const mergeSortHelper = async (arr) => {\n    // Base case\n    if (arr.length <= 1) {\n      // Pseudo code step 1-2: Check array length\n      await updateFn(array, [], false, speed, null, 1);\n      return arr;\n    }\n\n    // Pseudo code step 3-4: Split array\n    const middle = Math.floor(arr.length / 2);\n    await updateFn(array, [], false, speed, null, 3);\n\n    // Recursively sort left and right halves\n    // Pseudo code step 5: Sort left half\n    await updateFn(array, arr.slice(0, middle).map(item => array.indexOf(item)), false, speed, null, 5);\n    const left = await mergeSortHelper(arr.slice(0, middle));\n\n    // Pseudo code step 6: Sort right half\n    await updateFn(array, arr.slice(middle).map(item => array.indexOf(item)), false, speed, null, 6);\n    const right = await mergeSortHelper(arr.slice(middle));\n\n    // Merge the sorted halves\n    // Pseudo code step 7: Merge halves\n    await updateFn(array, [], false, speed, null, 7);\n    const merged = await merge(left, right);\n\n    // Update the original array with merged results\n    merged.forEach((item, index) => {\n      const originalIndex = array.indexOf(item);\n      if (originalIndex !== index) {\n        array[originalIndex] = array[index];\n        array[index] = item;\n      }\n    });\n\n    return merged;\n  };\n\n  await mergeSortHelper([...array]);\n\n  // Final update with metrics\n  await updateFn(array, [], false, speed, {\n    totalComparisons,\n    totalSwaps\n  }, 17);\n\n  return array;\n};\n\nexport default mergeSort;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}