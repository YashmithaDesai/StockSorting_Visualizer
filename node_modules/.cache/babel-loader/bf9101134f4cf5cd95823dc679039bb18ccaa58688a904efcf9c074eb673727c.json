{"ast":null,"code":"var _jsxFileName = \"C:\\\\stock-sorting-visualizer\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { fetchStockData } from './api/stockApi';\nimport Controls from './components/Controls/Controls';\nimport Visualization from './components/Visualizations/Visualization';\nimport './styles/main.css';\nimport PerformanceMetrics from './components/Metrics/PerformanceMetrics';\nimport DataSourceToggle from './components/Controls/DataSourceToggle';\nimport StockInfoPanel from './components/Metrics/StockInfoPanel';\nimport { mockStocks } from './api/mockData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [stocks, setStocks] = useState([]);\n  const [useLiveData, setUseLiveData] = useState(false);\n  const [selectedStock, setSelectedStock] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isSorting, setIsSorting] = useState(false);\n  const [activeAlgorithm, setActiveAlgorithm] = useState('bubble');\n  const [sortKey, setSortKey] = useState('price');\n  const [speed, setSpeed] = useState(500);\n  const [visualizationType, setVisualizationType] = useState('bar');\n  const [metrics, setMetrics] = useState({\n    comparisons: 0,\n    swaps: 0,\n    startTime: null,\n    timeTaken: 0\n  });\n\n  // Initial data load\n  useEffect(() => {\n    handleDataChange(useLiveData);\n  }, []);\n\n  // Example stock selection handler\n  const handleStockSelect = stock => {\n    setSelectedStock(stock);\n  };\n  const handleDataChange = async useLive => {\n    setIsLoading(true);\n    try {\n      const data = useLive ? await fetchStockData() : mockStocks();\n      setStocks(data);\n      setSelectedStock(null); // Reset selection when data changes\n    } catch (error) {\n      console.error(\"Error loading data:\", error);\n      // Fallback to mock data if live data fails\n      if (useLive) {\n        setStocks(mockStocks());\n        setUseLiveData(false);\n      }\n    }\n    setIsLoading(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Stock Sorting Visualizer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Controls, {\n      activeAlgorithm: activeAlgorithm,\n      setActiveAlgorithm: setActiveAlgorithm,\n      sortKey: sortKey,\n      setSortKey: setSortKey,\n      speed: speed,\n      setSpeed: setSpeed,\n      visualizationType: visualizationType,\n      setVisualizationType: setVisualizationType,\n      isSorting: isSorting,\n      stocks: stocks,\n      setStocks: setStocks,\n      setIsSorting: setIsSorting,\n      setMetrics: setMetrics,\n      metrics: metrics\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Visualization, {\n      stocks: stocks,\n      visualizationType: visualizationType,\n      sortKey: sortKey\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PerformanceMetrics, {\n      metrics: metrics,\n      activeAlgorithm: activeAlgorithm,\n      sortKey: sortKey,\n      isSorting: isSorting\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DataSourceToggle, {\n      useLiveData: useLiveData,\n      setUseLiveData: setUseLiveData,\n      isSorting: false // Pass your actual sorting state here\n      ,\n      onDataChange: handleDataChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: () => handleStockSelect(someStock)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StockInfoPanel, {\n      selectedStock: selectedStock,\n      stocks: stocks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"/KxQKtpuYPg4kGBY+eWSFomfNQw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","fetchStockData","Controls","Visualization","PerformanceMetrics","DataSourceToggle","StockInfoPanel","mockStocks","jsxDEV","_jsxDEV","App","_s","stocks","setStocks","useLiveData","setUseLiveData","selectedStock","setSelectedStock","isLoading","setIsLoading","isSorting","setIsSorting","activeAlgorithm","setActiveAlgorithm","sortKey","setSortKey","speed","setSpeed","visualizationType","setVisualizationType","metrics","setMetrics","comparisons","swaps","startTime","timeTaken","handleDataChange","handleStockSelect","stock","useLive","data","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onDataChange","onClick","someStock","_c","$RefreshReg$"],"sources":["C:/stock-sorting-visualizer/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { fetchStockData } from './api/stockApi';\r\nimport Controls from './components/Controls/Controls';\r\nimport Visualization from './components/Visualizations/Visualization';\r\nimport './styles/main.css';\r\nimport PerformanceMetrics from './components/Metrics/PerformanceMetrics';\r\nimport DataSourceToggle from './components/Controls/DataSourceToggle';\r\nimport StockInfoPanel from './components/Metrics/StockInfoPanel';\r\nimport { mockStocks } from './api/mockData';\r\n\r\nfunction App() {\r\n  const [stocks, setStocks] = useState([]);\r\n  const [useLiveData, setUseLiveData] = useState(false);\r\n  const [selectedStock, setSelectedStock] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isSorting, setIsSorting] = useState(false);\r\n  const [activeAlgorithm, setActiveAlgorithm] = useState('bubble');\r\n  const [sortKey, setSortKey] = useState('price');\r\n  const [speed, setSpeed] = useState(500);\r\n  const [visualizationType, setVisualizationType] = useState('bar');\r\n  const [metrics, setMetrics] = useState({\r\n  comparisons: 0,\r\n  swaps: 0,\r\n  startTime: null,\r\n  timeTaken: 0\r\n});\r\n\r\n\r\n  // Initial data load\r\n  useEffect(() => {\r\n    handleDataChange(useLiveData);\r\n  }, []);\r\n\r\n  // Example stock selection handler\r\n  const handleStockSelect = (stock) => {\r\n    setSelectedStock(stock);\r\n  };\r\n\r\n\r\nconst handleDataChange = async (useLive) => {\r\n    setIsLoading(true);\r\n    try {\r\n      const data = useLive ? await fetchStockData() : mockStocks();\r\n      setStocks(data);\r\n      setSelectedStock(null); // Reset selection when data changes\r\n    } catch (error) {\r\n      console.error(\"Error loading data:\", error);\r\n      // Fallback to mock data if live data fails\r\n      if (useLive) {\r\n        setStocks(mockStocks());\r\n        setUseLiveData(false);\r\n      }\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <h1>Stock Sorting Visualizer</h1>\r\n      <Controls\r\n        activeAlgorithm={activeAlgorithm}\r\n        setActiveAlgorithm={setActiveAlgorithm}\r\n        sortKey={sortKey}\r\n        setSortKey={setSortKey}\r\n        speed={speed}\r\n        setSpeed={setSpeed}\r\n        visualizationType={visualizationType}\r\n        setVisualizationType={setVisualizationType}\r\n        isSorting={isSorting}\r\n        stocks={stocks}\r\n        setStocks={setStocks}\r\n         setIsSorting={setIsSorting}\r\n         setMetrics={setMetrics}\r\n        metrics={metrics}\r\n      />\r\n      <Visualization\r\n        stocks={stocks}\r\n        visualizationType={visualizationType}\r\n        sortKey={sortKey}\r\n      />\r\n      \r\n      <PerformanceMetrics \r\n         metrics={metrics}\r\n         activeAlgorithm={activeAlgorithm}\r\n         sortKey={sortKey}\r\n         isSorting={isSorting}\r\n      />\r\n      <DataSourceToggle\r\n        useLiveData={useLiveData}\r\n        setUseLiveData={setUseLiveData}\r\n        isSorting={false} // Pass your actual sorting state here\r\n        onDataChange={handleDataChange}\r\n      />\r\n      \r\n      {/* Your visualization component that handles stock selection */}\r\n      <div onClick={() => handleStockSelect(someStock)}>\r\n        {/* Visualization implementation */}\r\n      </div>\r\n      \r\n      <StockInfoPanel \r\n        selectedStock={selectedStock} \r\n        stocks={stocks} \r\n      />\r\n\r\n\r\n       </div>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}