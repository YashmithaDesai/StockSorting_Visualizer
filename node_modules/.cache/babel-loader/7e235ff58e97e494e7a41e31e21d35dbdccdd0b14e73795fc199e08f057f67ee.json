{"ast":null,"code":"export async function quickSort(array, key, speed, updateFn, low = 0, high = array.length - 1) {\n  if (low < high) {\n    const pivotIndex = await partition(array, key, speed, updateFn, low, high);\n    await quickSort(array, key, speed, updateFn, low, pivotIndex - 1);\n    await quickSort(array, key, speed, updateFn, pivotIndex + 1, high);\n  }\n  return array;\n}\nasync function partition(array, key, speed, updateFn, low, high) {\n  const pivot = array[high][key];\n  let i = low - 1;\n  for (let j = low; j < high; j++) {\n    // Highlight the elements being compared\n    await updateFn(array, [j, high], false, speed);\n    if (array[j][key] < pivot) {\n      i++;\n      [array[i], array[j]] = [array[j], array[i]];\n      // Show the swap\n      await updateFn(array, [i, j], true, speed);\n    }\n  }\n  [array[i + 1], array[high]] = [array[high], array[i + 1]];\n  // Show the final pivot placement\n  await updateFn(array, [i + 1, high], true, speed);\n  return i + 1;\n}","map":{"version":3,"names":["quickSort","array","key","speed","updateFn","low","high","length","pivotIndex","partition","pivot","i","j"],"sources":["/Users/shreya/Desktop/DAA(sem-4)/lab-EL/StockSorting_Visualizer/src/algorithms/quickSort.js"],"sourcesContent":["export async function quickSort(array, key, speed, updateFn, low = 0, high = array.length - 1) {\n    if (low < high) {\n        const pivotIndex = await partition(array, key, speed, updateFn, low, high);\n        await quickSort(array, key, speed, updateFn, low, pivotIndex - 1);\n        await quickSort(array, key, speed, updateFn, pivotIndex + 1, high);\n    }\n    return array;\n}\n\nasync function partition(array, key, speed, updateFn, low, high) {\n    const pivot = array[high][key];\n    let i = low - 1;\n\n    for (let j = low; j < high; j++) {\n        // Highlight the elements being compared\n        await updateFn(array, [j, high], false, speed);\n\n        if (array[j][key] < pivot) {\n            i++;\n            [array[i], array[j]] = [array[j], array[i]];\n            // Show the swap\n            await updateFn(array, [i, j], true, speed);\n        }\n    }\n\n    [array[i + 1], array[high]] = [array[high], array[i + 1]];\n    // Show the final pivot placement\n    await updateFn(array, [i + 1, high], true, speed);\n\n    return i + 1;\n}"],"mappings":"AAAA,OAAO,eAAeA,SAASA,CAACC,KAAK,EAAEC,GAAG,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,GAAG,GAAG,CAAC,EAAEC,IAAI,GAAGL,KAAK,CAACM,MAAM,GAAG,CAAC,EAAE;EAC3F,IAAIF,GAAG,GAAGC,IAAI,EAAE;IACZ,MAAME,UAAU,GAAG,MAAMC,SAAS,CAACR,KAAK,EAAEC,GAAG,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,GAAG,EAAEC,IAAI,CAAC;IAC1E,MAAMN,SAAS,CAACC,KAAK,EAAEC,GAAG,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,GAAG,EAAEG,UAAU,GAAG,CAAC,CAAC;IACjE,MAAMR,SAAS,CAACC,KAAK,EAAEC,GAAG,EAAEC,KAAK,EAAEC,QAAQ,EAAEI,UAAU,GAAG,CAAC,EAAEF,IAAI,CAAC;EACtE;EACA,OAAOL,KAAK;AAChB;AAEA,eAAeQ,SAASA,CAACR,KAAK,EAAEC,GAAG,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,GAAG,EAAEC,IAAI,EAAE;EAC7D,MAAMI,KAAK,GAAGT,KAAK,CAACK,IAAI,CAAC,CAACJ,GAAG,CAAC;EAC9B,IAAIS,CAAC,GAAGN,GAAG,GAAG,CAAC;EAEf,KAAK,IAAIO,CAAC,GAAGP,GAAG,EAAEO,CAAC,GAAGN,IAAI,EAAEM,CAAC,EAAE,EAAE;IAC7B;IACA,MAAMR,QAAQ,CAACH,KAAK,EAAE,CAACW,CAAC,EAAEN,IAAI,CAAC,EAAE,KAAK,EAAEH,KAAK,CAAC;IAE9C,IAAIF,KAAK,CAACW,CAAC,CAAC,CAACV,GAAG,CAAC,GAAGQ,KAAK,EAAE;MACvBC,CAAC,EAAE;MACH,CAACV,KAAK,CAACU,CAAC,CAAC,EAAEV,KAAK,CAACW,CAAC,CAAC,CAAC,GAAG,CAACX,KAAK,CAACW,CAAC,CAAC,EAAEX,KAAK,CAACU,CAAC,CAAC,CAAC;MAC3C;MACA,MAAMP,QAAQ,CAACH,KAAK,EAAE,CAACU,CAAC,EAAEC,CAAC,CAAC,EAAE,IAAI,EAAET,KAAK,CAAC;IAC9C;EACJ;EAEA,CAACF,KAAK,CAACU,CAAC,GAAG,CAAC,CAAC,EAAEV,KAAK,CAACK,IAAI,CAAC,CAAC,GAAG,CAACL,KAAK,CAACK,IAAI,CAAC,EAAEL,KAAK,CAACU,CAAC,GAAG,CAAC,CAAC,CAAC;EACzD;EACA,MAAMP,QAAQ,CAACH,KAAK,EAAE,CAACU,CAAC,GAAG,CAAC,EAAEL,IAAI,CAAC,EAAE,IAAI,EAAEH,KAAK,CAAC;EAEjD,OAAOQ,CAAC,GAAG,CAAC;AAChB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}