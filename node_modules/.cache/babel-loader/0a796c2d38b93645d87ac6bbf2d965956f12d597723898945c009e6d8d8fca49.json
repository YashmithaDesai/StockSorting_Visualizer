{"ast":null,"code":"var _jsxFileName = \"/Users/shreya/Desktop/DAA(sem-4)/lab-EL/StockSorting_Visualizer/src/components/Controls/Controls.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport AlgorithmSelector from './AlgorithmSelector';\nimport SortKeySelector from './SortKeySelector';\nimport SpeedControl from './SpeedControl';\nimport VisualizationSwitcher from '../Visualizations/VisualizationSwitcher';\nimport { sortingAlgorithms } from '../../algorithms/algorithmHelper';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Controls = ({\n  activeAlgorithm,\n  setActiveAlgorithm,\n  sortKey,\n  setSortKey,\n  speed,\n  setSpeed,\n  visualizationType,\n  setVisualizationType,\n  isSorting,\n  setIsSorting,\n  stocks,\n  setStocks,\n  setMetrics\n}) => {\n  _s();\n  const [isPaused, setIsPaused] = useState(false);\n  const [currentStep, setCurrentStep] = useState(null);\n  const handleSort = async () => {\n    if (isSorting) {\n      if (isPaused) {\n        // Resume sorting\n        setIsPaused(false);\n        currentStep.resume();\n      } else {\n        // Pause sorting\n        setIsPaused(true);\n      }\n      return;\n    }\n    setIsSorting(true);\n    setMetrics(prev => ({\n      ...prev,\n      comparisons: 0,\n      swaps: 0,\n      startTime: performance.now(),\n      timeTaken: 0\n    }));\n    const algorithm = sortingAlgorithms[activeAlgorithm];\n    const arrayCopy = [...stocks];\n\n    // Create an update function that tracks metrics\n    const updateFn = async (updatedArray, highlightedIndices, isSwap, delay) => {\n      return new Promise(resolve => {\n        // Update metrics\n        setMetrics(prev => {\n          const newMetrics = {\n            ...prev\n          };\n          if (highlightedIndices && highlightedIndices.length >= 2) {\n            newMetrics.comparisons = (prev.comparisons || 0) + 1;\n          }\n          if (isSwap) {\n            newMetrics.swaps = (prev.swaps || 0) + 1;\n          }\n          newMetrics.timeTaken = performance.now() - prev.startTime;\n          return newMetrics;\n        });\n\n        // Update visualization\n        setStocks([...updatedArray]);\n\n        // Handle pausing\n        if (isPaused) {\n          const step = {\n            resolve\n          };\n          setCurrentStep(step);\n        } else {\n          setTimeout(resolve, delay);\n        }\n      });\n    };\n    try {\n      await algorithm(arrayCopy, sortKey, speed, updateFn);\n    } catch (error) {\n      console.error(\"Sorting error:\", error);\n    } finally {\n      setIsSorting(false);\n      setIsPaused(false);\n      setCurrentStep(null);\n    }\n  };\n  const handleReset = () => {\n    setStocks([...stocks].sort(() => Math.random() - 0.5)); // Shuffle\n    setMetrics({\n      comparisons: 0,\n      swaps: 0,\n      startTime: null,\n      timeTaken: 0\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"controls\",\n    children: [/*#__PURE__*/_jsxDEV(AlgorithmSelector, {\n      activeAlgorithm: activeAlgorithm,\n      setActiveAlgorithm: setActiveAlgorithm,\n      disabled: isSorting && !isPaused\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SortKeySelector, {\n      sortKey: sortKey,\n      setSortKey: setSortKey,\n      disabled: isSorting && !isPaused\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SpeedControl, {\n      speed: speed,\n      setSpeed: setSpeed\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(VisualizationSwitcher, {\n      visualizationType: visualizationType,\n      setVisualizationType: setVisualizationType\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"control-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSort,\n        className: isSorting ? isPaused ? 'resume' : 'pause' : 'start',\n        children: isSorting ? isPaused ? 'Resume' : 'Pause' : 'Start Sorting'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleReset,\n        disabled: isSorting && !isPaused,\n        className: \"reset\",\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n_s(Controls, \"gynazu2NbCOqx9q9+nx9ZbMNzio=\");\n_c = Controls;\nexport default Controls;\nvar _c;\n$RefreshReg$(_c, \"Controls\");","map":{"version":3,"names":["React","useState","AlgorithmSelector","SortKeySelector","SpeedControl","VisualizationSwitcher","sortingAlgorithms","jsxDEV","_jsxDEV","Controls","activeAlgorithm","setActiveAlgorithm","sortKey","setSortKey","speed","setSpeed","visualizationType","setVisualizationType","isSorting","setIsSorting","stocks","setStocks","setMetrics","_s","isPaused","setIsPaused","currentStep","setCurrentStep","handleSort","resume","prev","comparisons","swaps","startTime","performance","now","timeTaken","algorithm","arrayCopy","updateFn","updatedArray","highlightedIndices","isSwap","delay","Promise","resolve","newMetrics","length","step","setTimeout","error","console","handleReset","sort","Math","random","className","children","disabled","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/shreya/Desktop/DAA(sem-4)/lab-EL/StockSorting_Visualizer/src/components/Controls/Controls.js"],"sourcesContent":["import React, { useState } from 'react';\nimport AlgorithmSelector from './AlgorithmSelector';\nimport SortKeySelector from './SortKeySelector';\nimport SpeedControl from './SpeedControl';\nimport VisualizationSwitcher from '../Visualizations/VisualizationSwitcher';\nimport { sortingAlgorithms } from '../../algorithms/algorithmHelper';\n\nconst Controls = ({\n  activeAlgorithm,\n  setActiveAlgorithm,\n  sortKey,\n  setSortKey,\n  speed,\n  setSpeed,\n  visualizationType,\n  setVisualizationType,\n  isSorting,\n  setIsSorting,\n  stocks,\n  setStocks,\n  setMetrics\n}) => {\n  const [isPaused, setIsPaused] = useState(false);\n  const [currentStep, setCurrentStep] = useState(null);\n\n  const handleSort = async () => {\n    if (isSorting) {\n      if (isPaused) {\n        // Resume sorting\n        setIsPaused(false);\n        currentStep.resume();\n      } else {\n        // Pause sorting\n        setIsPaused(true);\n      }\n      return;\n    }\n\n    setIsSorting(true);\n    setMetrics(prev => ({\n      ...prev,\n      comparisons: 0,\n      swaps: 0,\n      startTime: performance.now(),\n      timeTaken: 0\n    }));\n\n    const algorithm = sortingAlgorithms[activeAlgorithm];\n    const arrayCopy = [...stocks];\n\n    // Create an update function that tracks metrics\n    const updateFn = async (updatedArray, highlightedIndices, isSwap, delay) => {\n      return new Promise(resolve => {\n        // Update metrics\n        setMetrics(prev => {\n          const newMetrics = { ...prev };\n          \n          if (highlightedIndices && highlightedIndices.length >= 2) {\n            newMetrics.comparisons = (prev.comparisons || 0) + 1;\n          }\n          \n          if (isSwap) {\n            newMetrics.swaps = (prev.swaps || 0) + 1;\n          }\n          \n          newMetrics.timeTaken = performance.now() - prev.startTime;\n          return newMetrics;\n        });\n\n        // Update visualization\n        setStocks([...updatedArray]);\n\n        // Handle pausing\n        if (isPaused) {\n          const step = { resolve };\n          setCurrentStep(step);\n        } else {\n          setTimeout(resolve, delay);\n        }\n      });\n    };\n\n    try {\n      await algorithm(arrayCopy, sortKey, speed, updateFn);\n    } catch (error) {\n      console.error(\"Sorting error:\", error);\n    } finally {\n      setIsSorting(false);\n      setIsPaused(false);\n      setCurrentStep(null);\n    }\n  };\n\n  const handleReset = () => {\n    setStocks([...stocks].sort(() => Math.random() - 0.5)); // Shuffle\n    setMetrics({\n      comparisons: 0,\n      swaps: 0,\n      startTime: null,\n      timeTaken: 0\n    });\n  };\n\n  return (\n    <div className=\"controls\">\n      <AlgorithmSelector \n        activeAlgorithm={activeAlgorithm}\n        setActiveAlgorithm={setActiveAlgorithm}\n        disabled={isSorting && !isPaused}\n      />\n      \n      <SortKeySelector \n        sortKey={sortKey}\n        setSortKey={setSortKey}\n        disabled={isSorting && !isPaused}\n      />\n      \n      <SpeedControl \n        speed={speed}\n        setSpeed={setSpeed}\n      />\n      \n      <VisualizationSwitcher \n        visualizationType={visualizationType}\n        setVisualizationType={setVisualizationType}\n      />\n      \n      <div className=\"control-buttons\">\n        <button \n          onClick={handleSort} \n          className={isSorting ? (isPaused ? 'resume' : 'pause') : 'start'}\n        >\n          {isSorting ? (isPaused ? 'Resume' : 'Pause') : 'Start Sorting'}\n        </button>\n        \n        <button \n          onClick={handleReset}\n          disabled={isSorting && !isPaused}\n          className=\"reset\"\n        >\n          Reset\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Controls;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}