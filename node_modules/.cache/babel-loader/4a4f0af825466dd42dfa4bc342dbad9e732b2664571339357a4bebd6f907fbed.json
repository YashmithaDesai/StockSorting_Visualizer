{"ast":null,"code":"var _jsxFileName = \"/Users/shreya/Desktop/DAA(sem-4)/lab-EL/StockSorting_Visualizer/src/components/Visualizations/StockVisualization.js\",\n  _s = $RefreshSig$();\n// src/components/Visualizations/StockVisualization.js\nimport React, { useEffect, useState } from 'react';\nimport { sortingAlgorithms } from '../../algorithms/algorithmHelper';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StockVisualization = ({\n  stocks,\n  sortKey,\n  onStockSelect,\n  algorithm,\n  speed,\n  isRacing,\n  setMetrics,\n  onSortingComplete,\n  isSortingComplete\n}) => {\n  _s();\n  const [localStocks, setLocalStocks] = useState([...stocks]);\n  const [highlightedIndices, setHighlightedIndices] = useState([]);\n  const [currentMetrics, setCurrentMetrics] = useState({\n    comparisons: 0,\n    swaps: 0,\n    startTime: 0,\n    timeTaken: 0\n  });\n  const [finalMetrics, setFinalMetrics] = useState(null);\n  useEffect(() => {\n    setLocalStocks([...stocks]);\n  }, [stocks]);\n  useEffect(() => {\n    if (isRacing && algorithm) {\n      const startSort = async () => {\n        const startTime = performance.now();\n        const initialMetrics = {\n          comparisons: 0,\n          swaps: 0,\n          startTime,\n          timeTaken: 0\n        };\n        setCurrentMetrics(initialMetrics);\n        setMetrics(initialMetrics);\n        setFinalMetrics(null);\n        const updateFn = async (updatedArray, indices, isSwap, delay) => {\n          return new Promise(resolve => {\n            setHighlightedIndices(indices);\n            setLocalStocks([...updatedArray]);\n            const newMetrics = {\n              ...currentMetrics,\n              comparisons: currentMetrics.comparisons + (indices && indices.length >= 2 ? 1 : 0),\n              swaps: currentMetrics.swaps + (isSwap ? 1 : 0),\n              timeTaken: performance.now() - startTime\n            };\n            setCurrentMetrics(newMetrics);\n            if (!isSortingComplete) {\n              setMetrics(newMetrics);\n            }\n            setTimeout(resolve, delay);\n          });\n        };\n        try {\n          const sortFunction = sortingAlgorithms[algorithm];\n          if (sortFunction) {\n            const arrayCopy = [...localStocks];\n            const transformedArray = arrayCopy.map(stock => ({\n              ...stock,\n              sortValue: sortKey === 'change' || sortKey === 'changePercent' ? stock[sortKey] : stock.change >= 0 ? stock[sortKey] : -stock[sortKey]\n            }));\n            await sortFunction(transformedArray, 'sortValue', speed, updateFn);\n\n            // Final metrics update\n            const finalMetrics = {\n              ...currentMetrics,\n              timeTaken: performance.now() - startTime\n            };\n            setCurrentMetrics(finalMetrics);\n            setFinalMetrics(finalMetrics);\n            setMetrics(finalMetrics);\n            setLocalStocks(transformedArray);\n\n            // Notify parent that sorting is complete\n            if (onSortingComplete) {\n              onSortingComplete(algorithm, finalMetrics);\n            }\n          }\n        } catch (error) {\n          console.error('Sorting error:', error);\n        }\n      };\n      startSort();\n    } else {\n      setHighlightedIndices([]);\n      if (!isSortingComplete) {\n        const resetMetrics = {\n          comparisons: 0,\n          swaps: 0,\n          startTime: 0,\n          timeTaken: 0\n        };\n        setCurrentMetrics(resetMetrics);\n        setMetrics(resetMetrics);\n      }\n    }\n  }, [isRacing, algorithm, speed, sortKey]);\n\n  // Use final metrics if sorting is complete, otherwise use current metrics\n  const displayMetrics = isSortingComplete ? finalMetrics : currentMetrics;\n  const maxValue = Math.max(...localStocks.map(stock => Math.abs(stock[sortKey])));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"stock-visualization\",\n    children: localStocks.map((stock, index) => {\n      const value = stock[sortKey];\n      const isNegative = stock.change < 0;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `stock-item ${highlightedIndices.includes(index) ? 'highlighted' : ''}`,\n        onClick: () => onStockSelect(stock),\n        style: {\n          height: `${Math.abs(value) / maxValue * 100}%`,\n          backgroundColor: highlightedIndices.includes(index) ? '#FFD700' : isNegative ? '#F44336' : '#4CAF50',\n          transition: 'all 0.3s ease'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"stock-label\",\n          children: [stock.symbol, \": $\", typeof value === 'number' ? Math.abs(value).toFixed(2) : value, (sortKey === 'change' || sortKey === 'changePercent') && (isNegative ? ' (-) ' : ' (+) ')]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 13\n        }, this)\n      }, stock.symbol, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n};\n_s(StockVisualization, \"uI3RFg1iPBiNmJ0Ufboabq82zHY=\");\n_c = StockVisualization;\nexport default StockVisualization;\nvar _c;\n$RefreshReg$(_c, \"StockVisualization\");","map":{"version":3,"names":["React","useEffect","useState","sortingAlgorithms","jsxDEV","_jsxDEV","StockVisualization","stocks","sortKey","onStockSelect","algorithm","speed","isRacing","setMetrics","onSortingComplete","isSortingComplete","_s","localStocks","setLocalStocks","highlightedIndices","setHighlightedIndices","currentMetrics","setCurrentMetrics","comparisons","swaps","startTime","timeTaken","finalMetrics","setFinalMetrics","startSort","performance","now","initialMetrics","updateFn","updatedArray","indices","isSwap","delay","Promise","resolve","newMetrics","length","setTimeout","sortFunction","arrayCopy","transformedArray","map","stock","sortValue","change","error","console","resetMetrics","displayMetrics","maxValue","Math","max","abs","className","children","index","value","isNegative","includes","onClick","style","height","backgroundColor","transition","symbol","toFixed","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/shreya/Desktop/DAA(sem-4)/lab-EL/StockSorting_Visualizer/src/components/Visualizations/StockVisualization.js"],"sourcesContent":["// src/components/Visualizations/StockVisualization.js\nimport React, { useEffect, useState } from 'react';\nimport { sortingAlgorithms } from '../../algorithms/algorithmHelper';\n\nconst StockVisualization = ({ \n  stocks, \n  sortKey, \n  onStockSelect, \n  algorithm,\n  speed,\n  isRacing,\n  setMetrics,\n  onSortingComplete,\n  isSortingComplete\n}) => {\n  const [localStocks, setLocalStocks] = useState([...stocks]);\n  const [highlightedIndices, setHighlightedIndices] = useState([]);\n  const [currentMetrics, setCurrentMetrics] = useState({\n    comparisons: 0,\n    swaps: 0,\n    startTime: 0,\n    timeTaken: 0\n  });\n  const [finalMetrics, setFinalMetrics] = useState(null);\n\n  useEffect(() => {\n    setLocalStocks([...stocks]);\n  }, [stocks]);\n\n  useEffect(() => {\n    if (isRacing && algorithm) {\n      const startSort = async () => {\n        const startTime = performance.now();\n        const initialMetrics = {\n          comparisons: 0,\n          swaps: 0,\n          startTime,\n          timeTaken: 0\n        };\n        \n        setCurrentMetrics(initialMetrics);\n        setMetrics(initialMetrics);\n        setFinalMetrics(null);\n\n        const updateFn = async (updatedArray, indices, isSwap, delay) => {\n          return new Promise(resolve => {\n            setHighlightedIndices(indices);\n            setLocalStocks([...updatedArray]);\n            \n            const newMetrics = {\n              ...currentMetrics,\n              comparisons: currentMetrics.comparisons + (indices && indices.length >= 2 ? 1 : 0),\n              swaps: currentMetrics.swaps + (isSwap ? 1 : 0),\n              timeTaken: performance.now() - startTime\n            };\n            \n            setCurrentMetrics(newMetrics);\n            if (!isSortingComplete) {\n              setMetrics(newMetrics);\n            }\n\n            setTimeout(resolve, delay);\n          });\n        };\n\n        try {\n          const sortFunction = sortingAlgorithms[algorithm];\n          if (sortFunction) {\n            const arrayCopy = [...localStocks];\n            const transformedArray = arrayCopy.map(stock => ({\n              ...stock,\n              sortValue: sortKey === 'change' || sortKey === 'changePercent' \n                ? stock[sortKey]\n                : stock.change >= 0 ? stock[sortKey] : -stock[sortKey]\n            }));\n            \n            await sortFunction(transformedArray, 'sortValue', speed, updateFn);\n            \n            // Final metrics update\n            const finalMetrics = {\n              ...currentMetrics,\n              timeTaken: performance.now() - startTime\n            };\n            setCurrentMetrics(finalMetrics);\n            setFinalMetrics(finalMetrics);\n            setMetrics(finalMetrics);\n            \n            setLocalStocks(transformedArray);\n            \n            // Notify parent that sorting is complete\n            if (onSortingComplete) {\n              onSortingComplete(algorithm, finalMetrics);\n            }\n          }\n        } catch (error) {\n          console.error('Sorting error:', error);\n        }\n      };\n\n      startSort();\n    } else {\n      setHighlightedIndices([]);\n      if (!isSortingComplete) {\n        const resetMetrics = {\n          comparisons: 0,\n          swaps: 0,\n          startTime: 0,\n          timeTaken: 0\n        };\n        setCurrentMetrics(resetMetrics);\n        setMetrics(resetMetrics);\n      }\n    }\n  }, [isRacing, algorithm, speed, sortKey]);\n\n  // Use final metrics if sorting is complete, otherwise use current metrics\n  const displayMetrics = isSortingComplete ? finalMetrics : currentMetrics;\n\n  const maxValue = Math.max(...localStocks.map(stock => Math.abs(stock[sortKey])));\n\n  return (\n    <div className=\"stock-visualization\">\n      {localStocks.map((stock, index) => {\n        const value = stock[sortKey];\n        const isNegative = stock.change < 0;\n        \n        return (\n          <div \n            key={stock.symbol}\n            className={`stock-item ${highlightedIndices.includes(index) ? 'highlighted' : ''}`}\n            onClick={() => onStockSelect(stock)}\n            style={{\n              height: `${(Math.abs(value) / maxValue) * 100}%`,\n              backgroundColor: highlightedIndices.includes(index) \n                ? '#FFD700'\n                : isNegative ? '#F44336' : '#4CAF50',\n              transition: 'all 0.3s ease'\n            }}\n          >\n            <span className=\"stock-label\">\n              {stock.symbol}: ${typeof value === 'number' ? Math.abs(value).toFixed(2) : value}\n              {(sortKey === 'change' || sortKey === 'changePercent') && (isNegative ? ' (-) ' : ' (+) ')}\n            </span>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default StockVisualization;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}