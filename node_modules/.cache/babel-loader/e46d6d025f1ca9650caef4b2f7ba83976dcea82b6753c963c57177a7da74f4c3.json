{"ast":null,"code":"// Import mock data for fallback\nimport { mockStocks } from './mockData';\nconst RAPID_API_KEY = 'dc1be977cdmsh79d0494f0038291p1a31f6jsncbb77d658c1d'; // Get from RapidAPI\nconst BASE_URL = 'https://yahoo-finance15.p.rapidapi.com/api/yahoo/qu/quote';\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes cache\n\n// Cache storage\nconst apiCache = {\n  data: null,\n  lastFetch: null\n};\n\n// List of some popular stock symbols\nconst STOCK_SYMBOLS = ['AAPL', 'GOOGL', 'MSFT', 'AMZN', 'META', 'TSLA', 'NVDA', 'JPM', 'BAC', 'WMT', 'DIS', 'NFLX', 'INTC', 'AMD', 'UBER'];\nexport async function fetchStockData() {\n  // Check cache first\n  if (apiCache.data && Date.now() - apiCache.lastFetch < CACHE_DURATION) {\n    console.log('üîµ Using cached data');\n    return apiCache.data;\n  }\n  console.log('üîÑ Fetching live data from Yahoo Finance API...');\n  try {\n    // Create the symbols parameter\n    const symbolsParam = STOCK_SYMBOLS.join(',');\n    const response = await fetch(`${BASE_URL}/${symbolsParam}`, {\n      method: 'GET',\n      headers: {\n        'X-RapidAPI-Key': RAPID_API_KEY,\n        'X-RapidAPI-Host': 'yahoo-finance15.p.rapidapi.com'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n\n    // Log the raw response to understand the structure\n    console.log('Raw API Response:', data);\n\n    // Check if data is in the expected format\n    if (!data || typeof data !== 'object') {\n      throw new Error('Invalid API response format');\n    }\n\n    // Transform the API response into our required format\n    const stocks = Object.entries(data).map(([symbol, stockData]) => {\n      if (!stockData || typeof stockData !== 'object') return null;\n      return {\n        symbol: symbol,\n        price: parseFloat(stockData.regularMarketPrice || stockData.price || 0),\n        change: parseFloat(stockData.regularMarketChange || stockData.change || 0),\n        changePercent: parseFloat(stockData.regularMarketChangePercent || stockData.changePercent || 0),\n        volume: parseInt(stockData.regularMarketVolume || stockData.volume || 0)\n      };\n    }).filter(stock => stock !== null);\n\n    // If we got no valid results, throw an error\n    if (stocks.length === 0) {\n      throw new Error('No valid stock data received');\n    }\n    console.log('‚úÖ Successfully fetched live data');\n    console.table(stocks.map(s => ({\n      symbol: s.symbol,\n      price: s.price,\n      change: s.change\n    })));\n\n    // Update cache\n    apiCache.data = stocks;\n    apiCache.lastFetch = Date.now();\n    return stocks;\n  } catch (error) {\n    console.error('‚ùå API Error:', error.message);\n    console.log('‚ö†Ô∏è Using fallback mock data');\n    return mockStocks;\n  }\n}","map":{"version":3,"names":["mockStocks","RAPID_API_KEY","BASE_URL","CACHE_DURATION","apiCache","data","lastFetch","STOCK_SYMBOLS","fetchStockData","Date","now","console","log","symbolsParam","join","response","fetch","method","headers","ok","Error","status","json","stocks","Object","entries","map","symbol","stockData","price","parseFloat","regularMarketPrice","change","regularMarketChange","changePercent","regularMarketChangePercent","volume","parseInt","regularMarketVolume","filter","stock","length","table","s","error","message"],"sources":["/Users/shreya/Desktop/DAA(sem-4)/lab-EL/StockSorting_Visualizer/src/api/stockApi.js"],"sourcesContent":["// Import mock data for fallback\nimport { mockStocks } from './mockData';\n\nconst RAPID_API_KEY = 'dc1be977cdmsh79d0494f0038291p1a31f6jsncbb77d658c1d'; // Get from RapidAPI\nconst BASE_URL = 'https://yahoo-finance15.p.rapidapi.com/api/yahoo/qu/quote';\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes cache\n\n// Cache storage\nconst apiCache = {\n  data: null,\n  lastFetch: null\n};\n\n// List of some popular stock symbols\nconst STOCK_SYMBOLS = [\n  'AAPL', 'GOOGL', 'MSFT', 'AMZN', 'META',\n  'TSLA', 'NVDA', 'JPM', 'BAC', 'WMT',\n  'DIS', 'NFLX', 'INTC', 'AMD', 'UBER'\n];\n\nexport async function fetchStockData() {\n  // Check cache first\n  if (apiCache.data && Date.now() - apiCache.lastFetch < CACHE_DURATION) {\n    console.log('üîµ Using cached data');\n    return apiCache.data;\n  }\n\n  console.log('üîÑ Fetching live data from Yahoo Finance API...');\n  \n  try {\n    // Create the symbols parameter\n    const symbolsParam = STOCK_SYMBOLS.join(',');\n    \n    const response = await fetch(`${BASE_URL}/${symbolsParam}`, {\n      method: 'GET',\n      headers: {\n        'X-RapidAPI-Key': RAPID_API_KEY,\n        'X-RapidAPI-Host': 'yahoo-finance15.p.rapidapi.com'\n      }\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const data = await response.json();\n    \n    // Log the raw response to understand the structure\n    console.log('Raw API Response:', data);\n\n    // Check if data is in the expected format\n    if (!data || typeof data !== 'object') {\n      throw new Error('Invalid API response format');\n    }\n\n    // Transform the API response into our required format\n    const stocks = Object.entries(data).map(([symbol, stockData]) => {\n      if (!stockData || typeof stockData !== 'object') return null;\n\n      return {\n        symbol: symbol,\n        price: parseFloat(stockData.regularMarketPrice || stockData.price || 0),\n        change: parseFloat(stockData.regularMarketChange || stockData.change || 0),\n        changePercent: parseFloat(stockData.regularMarketChangePercent || stockData.changePercent || 0),\n        volume: parseInt(stockData.regularMarketVolume || stockData.volume || 0)\n      };\n    }).filter(stock => stock !== null);\n\n    // If we got no valid results, throw an error\n    if (stocks.length === 0) {\n      throw new Error('No valid stock data received');\n    }\n\n    console.log('‚úÖ Successfully fetched live data');\n    console.table(stocks.map(s => ({\n      symbol: s.symbol,\n      price: s.price,\n      change: s.change\n    })));\n\n    // Update cache\n    apiCache.data = stocks;\n    apiCache.lastFetch = Date.now();\n    \n    return stocks;\n  } catch (error) {\n    console.error('‚ùå API Error:', error.message);\n    console.log('‚ö†Ô∏è Using fallback mock data');\n    return mockStocks;\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}