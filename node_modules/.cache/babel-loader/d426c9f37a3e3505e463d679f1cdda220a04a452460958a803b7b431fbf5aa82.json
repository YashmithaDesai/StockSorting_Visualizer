{"ast":null,"code":"export async function heapSort(array, key, speed, updateFn) {\n  const n = array.length;\n  const metrics = {\n    comparisons: 0,\n    swaps: 0\n  };\n\n  // Build max heap\n  for (let i = Math.floor(n / 2) - 1; i >= 0; i--) {\n    await heapify(array, n, i, key, speed, updateFn, metrics);\n  }\n\n  // Extract elements from heap one by one\n  for (let i = n - 1; i > 0; i--) {\n    // Move current root to end\n    metrics.swaps++;\n    [array[0], array[i]] = [array[i], array[0]];\n    await updateFn(array, [0, i], true, speed);\n\n    // Call max heapify on the reduced heap\n    await heapify(array, i, 0, key, speed, updateFn, metrics);\n  }\n\n  // Send final metrics\n  await updateFn(array, [], false, speed, {\n    totalComparisons: metrics.comparisons,\n    totalSwaps: metrics.swaps\n  });\n  return array;\n}\nasync function heapify(array, n, i, key, speed, updateFn, metrics) {\n  let largest = i;\n  const left = 2 * i + 1;\n  const right = 2 * i + 2;\n\n  // Compare with left child\n  if (left < n) {\n    metrics.comparisons++;\n    await updateFn(array, [largest, left], false, speed);\n    if (array[left][key] > array[largest][key]) {\n      largest = left;\n    }\n  }\n\n  // Compare with right child\n  if (right < n) {\n    metrics.comparisons++;\n    await updateFn(array, [largest, right], false, speed);\n    if (array[right][key] > array[largest][key]) {\n      largest = right;\n    }\n  }\n\n  // If largest is not root\n  if (largest !== i) {\n    metrics.swaps++;\n    [array[i], array[largest]] = [array[largest], array[i]];\n    await updateFn(array, [i, largest], true, speed);\n\n    // Recursively heapify the affected sub-tree\n    await heapify(array, n, largest, key, speed, updateFn, metrics);\n  }\n}","map":{"version":3,"names":["heapSort","array","key","speed","updateFn","n","length","metrics","comparisons","swaps","i","Math","floor","heapify","totalComparisons","totalSwaps","largest","left","right"],"sources":["/Users/shreya/Desktop/DAA(sem-4)/lab-EL/StockSorting_Visualizer/src/algorithms/heapSort.js"],"sourcesContent":["export async function heapSort(array, key, speed, updateFn) {\n  const n = array.length;\n  const metrics = { comparisons: 0, swaps: 0 };\n\n  // Build max heap\n  for (let i = Math.floor(n / 2) - 1; i >= 0; i--) {\n    await heapify(array, n, i, key, speed, updateFn, metrics);\n  }\n\n  // Extract elements from heap one by one\n  for (let i = n - 1; i > 0; i--) {\n    // Move current root to end\n    metrics.swaps++;\n    [array[0], array[i]] = [array[i], array[0]];\n    await updateFn(array, [0, i], true, speed);\n\n    // Call max heapify on the reduced heap\n    await heapify(array, i, 0, key, speed, updateFn, metrics);\n  }\n\n  // Send final metrics\n  await updateFn(\n    array,\n    [],\n    false,\n    speed,\n    { totalComparisons: metrics.comparisons, totalSwaps: metrics.swaps }\n  );\n\n  return array;\n}\n\nasync function heapify(array, n, i, key, speed, updateFn, metrics) {\n  let largest = i;\n  const left = 2 * i + 1;\n  const right = 2 * i + 2;\n\n  // Compare with left child\n  if (left < n) {\n    metrics.comparisons++;\n    await updateFn(array, [largest, left], false, speed);\n    if (array[left][key] > array[largest][key]) {\n      largest = left;\n    }\n  }\n\n  // Compare with right child\n  if (right < n) {\n    metrics.comparisons++;\n    await updateFn(array, [largest, right], false, speed);\n    if (array[right][key] > array[largest][key]) {\n      largest = right;\n    }\n  }\n\n  // If largest is not root\n  if (largest !== i) {\n    metrics.swaps++;\n    [array[i], array[largest]] = [array[largest], array[i]];\n    await updateFn(array, [i, largest], true, speed);\n\n    // Recursively heapify the affected sub-tree\n    await heapify(array, n, largest, key, speed, updateFn, metrics);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}