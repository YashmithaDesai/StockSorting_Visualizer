{"ast":null,"code":"export async function quickSort(array, key, speed, updateFn, low = 0, high = array.length - 1, metrics = {\n  comparisons: 0,\n  swaps: 0\n}) {\n  if (low < high) {\n    const [pivotIndex, newMetrics] = await partition(array, key, speed, updateFn, low, high, metrics);\n    await quickSort(array, key, speed, updateFn, low, pivotIndex - 1, newMetrics);\n    await quickSort(array, key, speed, updateFn, pivotIndex + 1, high, newMetrics);\n  }\n\n  // On the top-level call, send the final metrics\n  if (low === 0 && high === array.length - 1) {\n    await updateFn(array, [], false, speed, {\n      totalComparisons: metrics.comparisons,\n      totalSwaps: metrics.swaps\n    });\n  }\n  return array;\n}\nasync function partition(array, key, speed, updateFn, low, high, metrics) {\n  const pivot = array[high][key];\n  let i = low - 1;\n  for (let j = low; j < high; j++) {\n    // Highlight the elements being compared and count comparison\n    metrics.comparisons++;\n    await updateFn(array, [j, high], false, speed);\n    if (array[j][key] < pivot) {\n      i++;\n      // Count swap\n      metrics.swaps++;\n      [array[i], array[j]] = [array[j], array[i]];\n      // Show the swap\n      await updateFn(array, [i, j], true, speed);\n    }\n  }\n\n  // Count final swap\n  metrics.swaps++;\n  [array[i + 1], array[high]] = [array[high], array[i + 1]];\n  // Show the final pivot placement\n  await updateFn(array, [i + 1, high], true, speed);\n  return [i + 1, metrics];\n}","map":{"version":3,"names":["quickSort","array","key","speed","updateFn","low","high","length","metrics","comparisons","swaps","pivotIndex","newMetrics","partition","totalComparisons","totalSwaps","pivot","i","j"],"sources":["/Users/shreya/Desktop/DAA(sem-4)/lab-EL/StockSorting_Visualizer/src/algorithms/quickSort.js"],"sourcesContent":["export async function quickSort(array, key, speed, updateFn, low = 0, high = array.length - 1, metrics = { comparisons: 0, swaps: 0 }) {\n    if (low < high) {\n        const [pivotIndex, newMetrics] = await partition(array, key, speed, updateFn, low, high, metrics);\n        await quickSort(array, key, speed, updateFn, low, pivotIndex - 1, newMetrics);\n        await quickSort(array, key, speed, updateFn, pivotIndex + 1, high, newMetrics);\n    }\n\n    // On the top-level call, send the final metrics\n    if (low === 0 && high === array.length - 1) {\n        await updateFn(\n            array,\n            [],\n            false,\n            speed,\n            { totalComparisons: metrics.comparisons, totalSwaps: metrics.swaps }\n        );\n    }\n\n    return array;\n}\n\nasync function partition(array, key, speed, updateFn, low, high, metrics) {\n    const pivot = array[high][key];\n    let i = low - 1;\n\n    for (let j = low; j < high; j++) {\n        // Highlight the elements being compared and count comparison\n        metrics.comparisons++;\n        await updateFn(array, [j, high], false, speed);\n\n        if (array[j][key] < pivot) {\n            i++;\n            // Count swap\n            metrics.swaps++;\n            [array[i], array[j]] = [array[j], array[i]];\n            // Show the swap\n            await updateFn(array, [i, j], true, speed);\n        }\n    }\n\n    // Count final swap\n    metrics.swaps++;\n    [array[i + 1], array[high]] = [array[high], array[i + 1]];\n    // Show the final pivot placement\n    await updateFn(array, [i + 1, high], true, speed);\n\n    return [i + 1, metrics];\n}"],"mappings":"AAAA,OAAO,eAAeA,SAASA,CAACC,KAAK,EAAEC,GAAG,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,GAAG,GAAG,CAAC,EAAEC,IAAI,GAAGL,KAAK,CAACM,MAAM,GAAG,CAAC,EAAEC,OAAO,GAAG;EAAEC,WAAW,EAAE,CAAC;EAAEC,KAAK,EAAE;AAAE,CAAC,EAAE;EACnI,IAAIL,GAAG,GAAGC,IAAI,EAAE;IACZ,MAAM,CAACK,UAAU,EAAEC,UAAU,CAAC,GAAG,MAAMC,SAAS,CAACZ,KAAK,EAAEC,GAAG,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,GAAG,EAAEC,IAAI,EAAEE,OAAO,CAAC;IACjG,MAAMR,SAAS,CAACC,KAAK,EAAEC,GAAG,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,GAAG,EAAEM,UAAU,GAAG,CAAC,EAAEC,UAAU,CAAC;IAC7E,MAAMZ,SAAS,CAACC,KAAK,EAAEC,GAAG,EAAEC,KAAK,EAAEC,QAAQ,EAAEO,UAAU,GAAG,CAAC,EAAEL,IAAI,EAAEM,UAAU,CAAC;EAClF;;EAEA;EACA,IAAIP,GAAG,KAAK,CAAC,IAAIC,IAAI,KAAKL,KAAK,CAACM,MAAM,GAAG,CAAC,EAAE;IACxC,MAAMH,QAAQ,CACVH,KAAK,EACL,EAAE,EACF,KAAK,EACLE,KAAK,EACL;MAAEW,gBAAgB,EAAEN,OAAO,CAACC,WAAW;MAAEM,UAAU,EAAEP,OAAO,CAACE;IAAM,CACvE,CAAC;EACL;EAEA,OAAOT,KAAK;AAChB;AAEA,eAAeY,SAASA,CAACZ,KAAK,EAAEC,GAAG,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,GAAG,EAAEC,IAAI,EAAEE,OAAO,EAAE;EACtE,MAAMQ,KAAK,GAAGf,KAAK,CAACK,IAAI,CAAC,CAACJ,GAAG,CAAC;EAC9B,IAAIe,CAAC,GAAGZ,GAAG,GAAG,CAAC;EAEf,KAAK,IAAIa,CAAC,GAAGb,GAAG,EAAEa,CAAC,GAAGZ,IAAI,EAAEY,CAAC,EAAE,EAAE;IAC7B;IACAV,OAAO,CAACC,WAAW,EAAE;IACrB,MAAML,QAAQ,CAACH,KAAK,EAAE,CAACiB,CAAC,EAAEZ,IAAI,CAAC,EAAE,KAAK,EAAEH,KAAK,CAAC;IAE9C,IAAIF,KAAK,CAACiB,CAAC,CAAC,CAAChB,GAAG,CAAC,GAAGc,KAAK,EAAE;MACvBC,CAAC,EAAE;MACH;MACAT,OAAO,CAACE,KAAK,EAAE;MACf,CAACT,KAAK,CAACgB,CAAC,CAAC,EAAEhB,KAAK,CAACiB,CAAC,CAAC,CAAC,GAAG,CAACjB,KAAK,CAACiB,CAAC,CAAC,EAAEjB,KAAK,CAACgB,CAAC,CAAC,CAAC;MAC3C;MACA,MAAMb,QAAQ,CAACH,KAAK,EAAE,CAACgB,CAAC,EAAEC,CAAC,CAAC,EAAE,IAAI,EAAEf,KAAK,CAAC;IAC9C;EACJ;;EAEA;EACAK,OAAO,CAACE,KAAK,EAAE;EACf,CAACT,KAAK,CAACgB,CAAC,GAAG,CAAC,CAAC,EAAEhB,KAAK,CAACK,IAAI,CAAC,CAAC,GAAG,CAACL,KAAK,CAACK,IAAI,CAAC,EAAEL,KAAK,CAACgB,CAAC,GAAG,CAAC,CAAC,CAAC;EACzD;EACA,MAAMb,QAAQ,CAACH,KAAK,EAAE,CAACgB,CAAC,GAAG,CAAC,EAAEX,IAAI,CAAC,EAAE,IAAI,EAAEH,KAAK,CAAC;EAEjD,OAAO,CAACc,CAAC,GAAG,CAAC,EAAET,OAAO,CAAC;AAC3B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}