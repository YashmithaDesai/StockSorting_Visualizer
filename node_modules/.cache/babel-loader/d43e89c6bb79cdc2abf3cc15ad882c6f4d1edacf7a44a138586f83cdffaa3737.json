{"ast":null,"code":"var _jsxFileName = \"/Users/shreya/Desktop/DAA(sem-4)/lab-EL/StockSorting_Visualizer/src/components/Visualizations/StockVisualization.js\",\n  _s = $RefreshSig$();\n// src/components/Visualizations/StockVisualization.js\nimport React, { useEffect, useState } from 'react';\nimport { sortingAlgorithms } from '../../algorithms/algorithmHelper';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StockVisualization = ({\n  stocks,\n  sortKey,\n  onStockSelect,\n  algorithm,\n  speed,\n  isRacing,\n  setMetrics\n}) => {\n  _s();\n  const [localStocks, setLocalStocks] = useState([...stocks]);\n  const [highlightedIndices, setHighlightedIndices] = useState([]);\n  const [sortStartTime, setSortStartTime] = useState(null);\n  const [currentMetrics, setCurrentMetrics] = useState({\n    comparisons: 0,\n    swaps: 0,\n    timeTaken: 0,\n    isComplete: false\n  });\n  useEffect(() => {\n    setLocalStocks([...stocks]);\n  }, [stocks]);\n  useEffect(() => {\n    if (isRacing && algorithm) {\n      const startSort = async () => {\n        const startTime = performance.now();\n        setSortStartTime(startTime);\n\n        // Reset metrics at start\n        const initialMetrics = {\n          comparisons: 0,\n          swaps: 0,\n          startTime,\n          timeTaken: 0,\n          isComplete: false\n        };\n        setCurrentMetrics(initialMetrics);\n        setMetrics(initialMetrics);\n        const updateFn = async (updatedArray, indices, isSwap, delay, finalMetrics) => {\n          return new Promise(resolve => {\n            setHighlightedIndices(indices);\n            setLocalStocks([...updatedArray]);\n\n            // If final metrics are provided, use those\n            if (finalMetrics) {\n              const finalState = {\n                comparisons: finalMetrics.totalComparisons,\n                swaps: finalMetrics.totalSwaps,\n                timeTaken: performance.now() - startTime,\n                isComplete: true\n              };\n              setCurrentMetrics(finalState);\n              setMetrics(finalState);\n            } else {\n              // Update metrics in real-time\n              setCurrentMetrics(prev => {\n                const newMetrics = {\n                  ...prev,\n                  comparisons: indices && indices.length >= 2 ? prev.comparisons + 1 : prev.comparisons,\n                  swaps: isSwap ? prev.swaps + 1 : prev.swaps,\n                  timeTaken: performance.now() - startTime\n                };\n                // Update parent component's metrics\n                setMetrics(newMetrics);\n                return newMetrics;\n              });\n            }\n            setTimeout(resolve, delay);\n          });\n        };\n        try {\n          const sortFunction = sortingAlgorithms[algorithm];\n          if (sortFunction) {\n            const arrayCopy = [...localStocks];\n            const transformedArray = arrayCopy.map(stock => ({\n              ...stock,\n              // For price and volume, use absolute values for negative changes\n              // For change and changePercent, use actual values to maintain negative ordering\n              sortValue: sortKey === 'price' || sortKey === 'volume' ? stock.change < 0 ? -stock[sortKey] : stock[sortKey] : stock[sortKey]\n            }));\n            await sortFunction(transformedArray, 'sortValue', speed, updateFn);\n\n            // The final metrics will be set by the last updateFn call\n            setLocalStocks(transformedArray);\n          }\n        } catch (error) {\n          console.error('Sorting error:', error);\n        }\n      };\n      startSort();\n    } else {\n      setHighlightedIndices([]);\n      setSortStartTime(null);\n      setCurrentMetrics({\n        comparisons: 0,\n        swaps: 0,\n        timeTaken: 0,\n        isComplete: false\n      });\n    }\n  }, [isRacing, algorithm, speed, sortKey]);\n  const maxValue = Math.max(...localStocks.map(stock => Math.abs(stock[sortKey])));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"stock-visualization\",\n    children: localStocks.map((stock, index) => {\n      const value = stock[sortKey];\n      const isNegative = stock.change < 0;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `stock-item ${highlightedIndices.includes(index) ? 'highlighted' : ''}`,\n        onClick: () => onStockSelect(stock),\n        style: {\n          height: `${Math.abs(value) / maxValue * 100}%`,\n          backgroundColor: highlightedIndices.includes(index) ? '#FFD700' : isNegative ? '#F44336' : '#4CAF50',\n          transition: 'all 0.3s ease'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"stock-label\",\n          children: [stock.symbol, \": $\", typeof value === 'number' ? Math.abs(value).toFixed(2) : value, (sortKey === 'change' || sortKey === 'changePercent') && (isNegative ? ' (-) ' : ' (+) ')]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 13\n        }, this)\n      }, stock.symbol, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n};\n_s(StockVisualization, \"BaPqaIjnq3mQc1z6EPdGL9SrjZA=\");\n_c = StockVisualization;\nexport default StockVisualization;\nvar _c;\n$RefreshReg$(_c, \"StockVisualization\");","map":{"version":3,"names":["React","useEffect","useState","sortingAlgorithms","jsxDEV","_jsxDEV","StockVisualization","stocks","sortKey","onStockSelect","algorithm","speed","isRacing","setMetrics","_s","localStocks","setLocalStocks","highlightedIndices","setHighlightedIndices","sortStartTime","setSortStartTime","currentMetrics","setCurrentMetrics","comparisons","swaps","timeTaken","isComplete","startSort","startTime","performance","now","initialMetrics","updateFn","updatedArray","indices","isSwap","delay","finalMetrics","Promise","resolve","finalState","totalComparisons","totalSwaps","prev","newMetrics","length","setTimeout","sortFunction","arrayCopy","transformedArray","map","stock","sortValue","change","error","console","maxValue","Math","max","abs","className","children","index","value","isNegative","includes","onClick","style","height","backgroundColor","transition","symbol","toFixed","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/shreya/Desktop/DAA(sem-4)/lab-EL/StockSorting_Visualizer/src/components/Visualizations/StockVisualization.js"],"sourcesContent":["// src/components/Visualizations/StockVisualization.js\nimport React, { useEffect, useState } from 'react';\nimport { sortingAlgorithms } from '../../algorithms/algorithmHelper';\n\nconst StockVisualization = ({ \n  stocks, \n  sortKey, \n  onStockSelect, \n  algorithm,\n  speed,\n  isRacing,\n  setMetrics \n}) => {\n  const [localStocks, setLocalStocks] = useState([...stocks]);\n  const [highlightedIndices, setHighlightedIndices] = useState([]);\n  const [sortStartTime, setSortStartTime] = useState(null);\n  const [currentMetrics, setCurrentMetrics] = useState({\n    comparisons: 0,\n    swaps: 0,\n    timeTaken: 0,\n    isComplete: false\n  });\n\n  useEffect(() => {\n    setLocalStocks([...stocks]);\n  }, [stocks]);\n\n  useEffect(() => {\n    if (isRacing && algorithm) {\n      const startSort = async () => {\n        const startTime = performance.now();\n        setSortStartTime(startTime);\n        \n        // Reset metrics at start\n        const initialMetrics = {\n          comparisons: 0,\n          swaps: 0,\n          startTime,\n          timeTaken: 0,\n          isComplete: false\n        };\n        setCurrentMetrics(initialMetrics);\n        setMetrics(initialMetrics);\n\n        const updateFn = async (updatedArray, indices, isSwap, delay, finalMetrics) => {\n          return new Promise(resolve => {\n            setHighlightedIndices(indices);\n            setLocalStocks([...updatedArray]);\n            \n            // If final metrics are provided, use those\n            if (finalMetrics) {\n              const finalState = {\n                comparisons: finalMetrics.totalComparisons,\n                swaps: finalMetrics.totalSwaps,\n                timeTaken: performance.now() - startTime,\n                isComplete: true\n              };\n              setCurrentMetrics(finalState);\n              setMetrics(finalState);\n            } else {\n              // Update metrics in real-time\n              setCurrentMetrics(prev => {\n                const newMetrics = {\n                  ...prev,\n                  comparisons: indices && indices.length >= 2 ? prev.comparisons + 1 : prev.comparisons,\n                  swaps: isSwap ? prev.swaps + 1 : prev.swaps,\n                  timeTaken: performance.now() - startTime\n                };\n                // Update parent component's metrics\n                setMetrics(newMetrics);\n                return newMetrics;\n              });\n            }\n\n            setTimeout(resolve, delay);\n          });\n        };\n\n        try {\n          const sortFunction = sortingAlgorithms[algorithm];\n          if (sortFunction) {\n            const arrayCopy = [...localStocks];\n            const transformedArray = arrayCopy.map(stock => ({\n              ...stock,\n              // For price and volume, use absolute values for negative changes\n              // For change and changePercent, use actual values to maintain negative ordering\n              sortValue: sortKey === 'price' || sortKey === 'volume'\n                ? (stock.change < 0 ? -stock[sortKey] : stock[sortKey])\n                : stock[sortKey]\n            }));\n            \n            await sortFunction(transformedArray, 'sortValue', speed, updateFn);\n            \n            // The final metrics will be set by the last updateFn call\n            setLocalStocks(transformedArray);\n          }\n        } catch (error) {\n          console.error('Sorting error:', error);\n        }\n      };\n\n      startSort();\n    } else {\n      setHighlightedIndices([]);\n      setSortStartTime(null);\n      setCurrentMetrics({\n        comparisons: 0,\n        swaps: 0,\n        timeTaken: 0,\n        isComplete: false\n      });\n    }\n  }, [isRacing, algorithm, speed, sortKey]);\n\n  const maxValue = Math.max(...localStocks.map(stock => Math.abs(stock[sortKey])));\n\n  return (\n    <div className=\"stock-visualization\">\n      {localStocks.map((stock, index) => {\n        const value = stock[sortKey];\n        const isNegative = stock.change < 0;\n        \n        return (\n          <div \n            key={stock.symbol}\n            className={`stock-item ${highlightedIndices.includes(index) ? 'highlighted' : ''}`}\n            onClick={() => onStockSelect(stock)}\n            style={{\n              height: `${(Math.abs(value) / maxValue) * 100}%`,\n              backgroundColor: highlightedIndices.includes(index) \n                ? '#FFD700'\n                : isNegative ? '#F44336' : '#4CAF50',\n              transition: 'all 0.3s ease'\n            }}\n          >\n            <span className=\"stock-label\">\n              {stock.symbol}: ${typeof value === 'number' ? Math.abs(value).toFixed(2) : value}\n              {(sortKey === 'change' || sortKey === 'changePercent') && (isNegative ? ' (-) ' : ' (+) ')}\n            </span>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default StockVisualization;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}